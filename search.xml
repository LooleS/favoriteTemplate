<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Arduino基础入门篇32—LCD1602驱动库的使用</title>
      <link href="/posts/8edb.html"/>
      <url>/posts/8edb.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160839_757.JPG" alt="LCD1602显示"></p><p>本篇介绍液晶驱动库「LiquidCrystal」，通过库来驱动LCD1602刷新显示秒数。</p><h2 id="1-安装库"><a href="#1-安装库" class="headerlink" title="1. 安装库"></a>1. 安装库</h2><p>「LiquidCrystal」是Arduino的液晶驱动库，使用它能很方便的驱动常用液晶显示模块。其详细介绍请参考<a href="https://www.arduino.cc/en/Reference/LiquidCrystal" target="_blank" rel="noopener">官网介绍</a>。</p><p>一般下载的Arduino IDE会自带此库，也可以在管理库中查找添加。在IDE中点击「项目」—「加载库」—「管理库」，查找「LiquidCrystal」，选择最新版本进行安装。目前最新版本为1.0.7。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160840_176.jpg" alt="安装库"></p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>LCD1602液晶屏</li><li>16Pin排针</li><li>10K电位器</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路图。"><a href="#1-根据原理图搭建电路图。" class="headerlink" title="1. 根据原理图搭建电路图。"></a>1. 根据原理图搭建电路图。</h3><p>LCD1602的第1、5、16脚接开发板GND；LCD1602第2、15脚接开发板5V；LCD1602的第4、6、11、12、13、14分别连接开发板数字引脚7、6、5、4、3、2；电位器两端引脚分别连接5V和GND，中间引脚连接LCD1602第3引脚。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160840_931.jpg" alt="电路连接图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160840_90.JPG" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * LCD1602 * 1602驱动库的使用 */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;LiquidCrystal.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> en <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> d4 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> d5 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> d6 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d7 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>LiquidCrystal <span class="token function">lcd</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> en<span class="token punctuation">,</span> d4<span class="token punctuation">,</span> d5<span class="token punctuation">,</span> d6<span class="token punctuation">,</span> d7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  lcd<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lcd<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  lcd<span class="token punctuation">.</span><span class="token function">setCursor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lcd<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lcd<span class="token punctuation">.</span><span class="token function">setCursor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lcd<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Second: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lcd<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160840_157.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>LCD1602动态刷新秒数。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160841_445.gif" alt="实验现象"></p><hr><h3 id="Arduino基础入门篇系列就写到这里了，32篇基础教程希望能给Arduino初学者提供帮助，感谢读者的支持与鼓励，若发现其中有错误还望指正，希望兴趣引导着你通过Arduino实现每一个有创意的idea。"><a href="#Arduino基础入门篇系列就写到这里了，32篇基础教程希望能给Arduino初学者提供帮助，感谢读者的支持与鼓励，若发现其中有错误还望指正，希望兴趣引导着你通过Arduino实现每一个有创意的idea。" class="headerlink" title="Arduino基础入门篇系列就写到这里了，32篇基础教程希望能给Arduino初学者提供帮助，感谢读者的支持与鼓励，若发现其中有错误还望指正，希望兴趣引导着你通过Arduino实现每一个有创意的idea。"></a>Arduino基础入门篇系列就写到这里了，32篇基础教程希望能给Arduino初学者提供帮助，感谢读者的支持与鼓励，若发现其中有错误还望指正，希望兴趣引导着你通过Arduino实现每一个有创意的idea。</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇31—LCD1602液晶显示</title>
      <link href="/posts/655d.html"/>
      <url>/posts/655d.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160837_426.JPG" alt="LCD1602显示"></p><p>LCD1602也叫1602字符型液晶，是一种专门用来显示字母、数字、符号的点阵型液晶模块，能同时显示16X2即32个字符。本篇我们来认识LCD1602，驱动它显示「Hello World」。</p><h2 id="1-LCD1602介绍"><a href="#1-LCD1602介绍" class="headerlink" title="1. LCD1602介绍"></a>1. LCD1602介绍</h2><p>对于单片机爱好者和电子爱好者来说，或多或少都曾使用过液晶显示模块。它们都是由若干个点阵字符位组成的，根据显示内容可分为1602、12864等。LCD1602可以显示两行字符，每行16个，显示背景也有所不同，有蓝色白字和黄色白字等。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160838_337.JPG" alt="LCD1602"></p><p>LCD1602接口说明：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160838_864.jpg" alt="管脚说明"></p><p>其中：</p><ul><li>VL(V0)：液晶对比度调整端，用于调节显示对比度，一般接10K电位器进行调整。</li><li>RS：数据/命令选择。高电平表示数据，低电平表示命令。</li><li>RW：读写选择。高电平为读，低电平为写。一般我们写入数据进行显示，所以此引脚接地。</li><li>EN：使能信号，配合数据/命令的读写。</li><li>D0-D7：双向数据端。可以使用8根数据线并行操作，也可以使用4根数据线串行操作。</li></ul><p>关于LCD1602的驱动也非常简单。官方数据手册给出了基本操作时序和初始化设置步骤。本篇我们为了减少线路连接采用4位串行操作方式，一条8位的数据和命令分两次写入1602。</p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>LCD1602液晶屏</li><li>16Pin排针</li><li>10K电位器</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路图。"><a href="#1-根据原理图搭建电路图。" class="headerlink" title="1. 根据原理图搭建电路图。"></a>1. 根据原理图搭建电路图。</h3><p>LCD1602的第1、5、16脚接开发板GND；LCD1602第2、15脚接开发板5V；LCD1602的第4、6、11、12、13、14分别连接开发板数字引脚7、6、5、4、3、2；电位器两端引脚分别连接5V和GND，中间引脚连接LCD1602第3引脚。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160838_523.jpg" alt="电路连接图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160838_14.JPG" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * LCD1602_bit4 * LCD1602驱动显示Hello World */</span><span class="token keyword">int</span> LCD1602_RS <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> LCD1602_EN <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">int</span> DB<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * LCD写命令 */</span><span class="token keyword">void</span> <span class="token function">LCD_Command_Write</span><span class="token punctuation">(</span><span class="token keyword">int</span> command<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_RS<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  temp <span class="token operator">=</span> command <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> DB<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> temp <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  temp <span class="token operator">=</span> <span class="token punctuation">(</span>command <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> DB<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> temp <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * LCD写数据 */</span><span class="token keyword">void</span> <span class="token function">LCD_Data_Write</span><span class="token punctuation">(</span><span class="token keyword">int</span> dat<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_RS<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  temp <span class="token operator">=</span> dat <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> DB<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> temp <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  temp <span class="token operator">=</span> <span class="token punctuation">(</span>dat <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> DB<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> temp <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span> LCD1602_EN<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * LCD设置光标位置 */</span><span class="token keyword">void</span> <span class="token function">LCD_SET_XY</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> address<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    address <span class="token operator">=</span> <span class="token number">0x80</span> <span class="token operator">+</span> x<span class="token punctuation">;</span>  <span class="token keyword">else</span>          address <span class="token operator">=</span> <span class="token number">0xC0</span> <span class="token operator">+</span> x<span class="token punctuation">;</span>  <span class="token function">LCD_Command_Write</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * LCD写一个字符 */</span><span class="token keyword">void</span> <span class="token function">LCD_Write_Char</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> dat<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">LCD_SET_XY</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_Data_Write</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * LCD写字符串 */</span><span class="token keyword">void</span> <span class="token function">LCD_Write_String</span><span class="token punctuation">(</span><span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">LCD_SET_XY</span><span class="token punctuation">(</span> X<span class="token punctuation">,</span> Y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置地址</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//写字符串</span>  <span class="token punctuation">{</span>    <span class="token function">LCD_Data_Write</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_Command_Write</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示模式设置4线 2行 5x7</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_Command_Write</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示光标移动设置</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_Command_Write</span><span class="token punctuation">(</span><span class="token number">0x0c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示开及光标设置</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_Command_Write</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置数据地址指针</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_Command_Write</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示清屏</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">LCD_Write_String</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_Write_String</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"--TonyCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160838_589.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>LCD1602显示字符「Hello World!  –TonyCode」，通过调节电位器可调节显示对比度。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160839_689.gif" alt="实验现象"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇30—数字温度传感器DS18B20</title>
      <link href="/posts/b30a.html"/>
      <url>/posts/b30a.html</url>
      
        <content type="html"><![CDATA[<p>温度传感器的种类繁多，按照测量方式分为接触式和非接触式，按照传感器材料分为热电阻和热电偶两类，按照工作原理分为模拟式和数字式。上一篇介绍了模拟温度传感器LM35，本篇介绍数字温度传感器DS18B20的使用。</p><h2 id="1-DS18B20介绍"><a href="#1-DS18B20介绍" class="headerlink" title="1. DS18B20介绍"></a>1. DS18B20介绍</h2><p>DS18B20是常用的数字温度传感器，使用集成芯片，采用单总线技术，能够有效的减小外界的干扰，提高测量的精度。其输出的是数字信号，接线非常方便，封装成不同方式可以应用于不同场合，如管道式，螺纹式，磁铁吸附式，不锈钢封装式。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160835_21.JPG" alt="DS18B20"></p><p>主要特点：</p><ul><li>采用单总线的接口方式。只需要一条数据线就能双向通讯。</li><li>测量范围宽，精度高。其测量范围为-55℃ — +125℃ ，在-10—+85℃ 范围内，精度为±0.5℃ 。</li><li>多点组网功能。多个DS18B20可以并联在惟一的三线上，实现多点测温。</li><li>供电方式灵活。可通过内部寄生电路从数据线上获取电源。</li><li>测量参数可配置。DS18B20的测量分辨率可通过程序设定9—12位。</li><li>掉电保护功能。内部含有EEPROM，在系统掉电以后，仍可保存分辨率及报警温度的设定值。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160836_993.jpg" alt="封装"></p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>DS18B20</li><li>10K直插电阻</li></ul><h2 id="3-安装库"><a href="#3-安装库" class="headerlink" title="3. 安装库"></a>3. 安装库</h2><p>本实验用到两个库，分别为「OneWire」和「DallasTemperature」，前者是单总线库，后者是在前者基础上针对Dallas温度传感器封装的库。</p><ul><li>在IDE中点击「项目」—「加载库」—「管理库」，查找「OneWire」，选择最新版本进行安装。目前最新版本为2.3.4。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160836_60.jpg" alt="安装库1"></p><ul><li>查找「DallasTemperature」，选择最新版本进行安装。目前最新版本为3.8.0。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160836_185.jpg" alt="安装库2"></p><h2 id="4-实验步骤"><a href="#4-实验步骤" class="headerlink" title="4. 实验步骤"></a>4. 实验步骤</h2><h3 id="1-根据原理图搭建电路图。"><a href="#1-根据原理图搭建电路图。" class="headerlink" title="1. 根据原理图搭建电路图。"></a>1. 根据原理图搭建电路图。</h3><p>线路连接非常简单，DS18B20的VCC、DQ、GND分别连接到开发板的5V、2、GND。10K电阻一段连接VCC，另一端连接DQ，上拉电阻用于提高I/O口的驱动能力。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160836_795.jpg" alt="电路连接图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160836_340.JPG" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;OneWire.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;DallasTemperature.h></span></span><span class="token comment" spellcheck="true">// 数据输出脚接开发板数字引脚2</span><span class="token macro property">#<span class="token directive keyword">define</span> ONE_WIRE_BUS 2</span>OneWire <span class="token function">oneWire</span><span class="token punctuation">(</span>ONE_WIRE_BUS<span class="token punctuation">)</span><span class="token punctuation">;</span>DallasTemperature <span class="token function">sensors</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>oneWire<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sensors<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   sensors<span class="token punctuation">.</span><span class="token function">requestTemperatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 发送命令获取温度</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Temperature for the device 1 (index 0) is: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sensors<span class="token punctuation">.</span><span class="token function">getTempCByIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160837_565.jpg" alt="程序下载"></p><h2 id="5-实验现象"><a href="#5-实验现象" class="headerlink" title="5. 实验现象"></a>5. 实验现象</h2><p>打开串口监视器，波特率设置为9600，串口会循环打印读取的温度值。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160837_321.gif" alt="实验现象"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇29—模拟温度传感器LM35</title>
      <link href="/posts/d78a.html"/>
      <url>/posts/d78a.html</url>
      
        <content type="html"><![CDATA[<p>温度传感器就是利用物质随温度变化特性的规律，把温度转换成可输出信号的传感器，是普遍应用的传感器之一。本篇介绍模拟温度传感器—LM35。</p><h2 id="1-LM35介绍"><a href="#1-LM35介绍" class="headerlink" title="1. LM35介绍"></a>1. LM35介绍</h2><p>LM35是很常用的温度传感器元件，电路连接非常方便，只需要一个模拟接口，其输出电压为摄氏度温标。采用内部补偿，输出可以从0℃开始。工作电压4—30V，芯片自身几乎没有散热问题来影响测量。</p><p>传感器输出电压与摄氏度呈线性关系，0℃时输出0V，每升高1℃，输出电压增加10mV。我们根据这一关系将电压输入转换成对应的温度值。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160834_600.jpg" alt="LM35"></p><p>LM35封装如下，标有型号的丝印面朝上，从左到右引脚以此为：VCC、VOUT、GND。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160834_172.jpg" alt="封装引脚"></p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>LM35</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路图。"><a href="#1-根据原理图搭建电路图。" class="headerlink" title="1. 根据原理图搭建电路图。"></a>1. 根据原理图搭建电路图。</h3><p>线路连接非常简单，LM35的VCC、VOUT、GND分别连接到开发板的5V、A0、GND。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160834_395.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160834_545.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * LM35 * 模拟温度传感器LM35测试 */</span><span class="token keyword">int</span> potPin <span class="token operator">=</span> A0<span class="token punctuation">;</span><span class="token keyword">float</span> temperature <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置串口波特率9600</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  value <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>potPin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取模拟输入</span>  <span class="token comment" spellcheck="true">//电压与摄氏度转换：</span>  <span class="token comment" spellcheck="true">//0.00488125=5/1024，0~5V对应模拟口读数1~1024，每10毫伏对应1℃</span>  temperature <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">0.0048828125</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Temper =  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"℃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160835_913.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>打开串口监视器，波特率设置为9600，串口会循环打印读取的温度值。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160835_563.gif" alt="实验现象"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇28—舵机控制</title>
      <link href="/posts/8a18.html"/>
      <url>/posts/8a18.html</url>
      
        <content type="html"><![CDATA[<p>舵机是一种位置「角度」伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。目前在高档遥控玩具、航模、机器人中已经得到普遍使用。舵机是一种俗称，其实是一种伺服马达。本篇通过官方驱动库来实现舵机控制。</p><h2 id="1-舵机介绍"><a href="#1-舵机介绍" class="headerlink" title="1. 舵机介绍"></a>1. 舵机介绍</h2><ul><li>结构组成<br>舵机实际上是一种位置伺服的驱动器，主要是由外壳、电路板、无核心马达、齿轮与位置检测器所构成。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160831_485.jpg" alt="内部结构"></p><ul><li><p>工作原理<br>舵机内部有一个基准电路，产生周期为20ms、宽度为1.5ms的基准信号，将获得的直流偏置电压与电位器的电压比较，获得电压差输出。经过电路板IC方向判断，再驱动无核心马达开始转动，透过减速齿轮将动力传至摆臂，同时由位置检测器送回信号，判断是否已经到位。</p><p>舵机转动的角度是通过调节PWM「脉冲宽度调制」信号的占空比来实现的。标准的PWM信号的周期固定为20ms，理论上脉宽分布应该在1ms到2ms之间，实际上可由0.5ms到2.5ms之间，脉宽与转角0°—180°相对应。不同厂家不同型号的舵机也会有所差异。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160832_28.jpg" alt="PWM控制"></p><ul><li>外部接线<br>舵机一般都外接三根线，分别用棕、红、橙三种颜色进行区分，由于品牌不同，颜色也会有所差异，棕色为接地线，红色为电源正极线，橙色为信号线。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160832_448.jpg" alt="控制线"></p><p>由于Arduino的驱动能力有限，当需要控制多个舵机时，需要外接电源以及使用专用的舵机控制板。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160832_177.jpg" alt="舵机控制板"></p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>配套连接线</li><li>舵机</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>线路连接非常简单，舵机红色线接开发板5V，棕色线接开发板GND，橙色信号线接开发板数字引脚9。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160832_714.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160833_19.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Servo.h></span></span>Servo myservo<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义Servo对象来控制</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 角度存储变量</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  myservo<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 控制线连接数字9</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;=</span> <span class="token number">180</span><span class="token punctuation">;</span> pos <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 0°到180°</span>    <span class="token comment" spellcheck="true">// in steps of 1 degree</span>    myservo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 舵机角度写入</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 等待转动到指定角度</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span> pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 从180°到0°</span>    myservo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 舵机角度写入</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 等待转动到指定角度</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160833_788.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>舵机在0°和180°间不断转动。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160833_918.gif" alt="实验现象"></p><h2 id="5-库函数介绍"><a href="#5-库函数介绍" class="headerlink" title="5. 库函数介绍"></a>5. 库函数介绍</h2><p>用Arduino控制舵机一般有两种方法：</p><ol><li>通过Arduino的普通数字引脚产生占空比不同的方波，模拟产生PWM信号进行舵机控制。</li><li>直接利用Arduino自带的Servo库进行控制，但是自带库只支持数字引脚9和10接口。</li></ol><p>Servo库常用函数：</p><ul><li>Attach(接口)—设定舵机接口，只能选择数字引脚9或者10。</li><li>Write(角度)—用于设定舵机旋转的角度，可设定范围0°—180°。</li><li>Read()—用于读取舵机角度的语句，可理解为读取最后一条write()命令中的值。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇27—步进电机驱动库的使用</title>
      <link href="/posts/c92a.html"/>
      <url>/posts/c92a.html</url>
      
        <content type="html"><![CDATA[<p>本篇介绍步进电机驱动库的使用，通过读取电位器输入，控制步进电机转动相应角度。</p><p>Stepper库是官方提供的驱动库，我们启动Arduino IDE，点击「文件」—「示例」就能找到Stepper库，官方提供了四个例程。关于Stepper库可参考<a href="https://www.arduino.cc/en/Reference/Stepper" target="_blank" rel="noopener">官方介绍</a>。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>ULN2003驱动板</li><li>步进电机</li><li>电位器</li></ul><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>原理图在上一篇基础上添加了电位器的连接。ULN2003驱动板上IN1、IN2、IN3、IN4分别连接UNO开发板的数字引脚2，3，4，5；驱动板电源输入+、-引脚分别连接UNO开发板的5V、GND；电位器中间引脚连接Uno模拟引脚A0,电位器两端引脚分别连接Uno的5V和GND。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160829_325.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160830_168.jpg" alt="实物连接图"></p><h3 id="2-修改Stepper源文件。"><a href="#2-修改Stepper源文件。" class="headerlink" title="2. 修改Stepper源文件。"></a>2. 修改Stepper源文件。</h3><p>由于我们使用的步进电机和官方驱动库中有所差异，所以需要对驱动库稍加修改。</p><ul><li>找到Arduino IDE安装目录，进入\libraries\Stepper\src\，用文本文件打开Stepper.cpp。将255行switch包含的case注释掉。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160830_123.jpg" alt="库文件"></p><ul><li>拷贝如下代码到switch中。</li></ul><pre class=" language-c++"><code class="language-c++">     case 0:  // 1010        digitalWrite(motor_pin_1, HIGH);        digitalWrite(motor_pin_2, LOW);        digitalWrite(motor_pin_3, LOW);        digitalWrite(motor_pin_4, LOW);      break;      case 1:  // 0110        digitalWrite(motor_pin_1, LOW);        digitalWrite(motor_pin_2, HIGH);        digitalWrite(motor_pin_3, LOW);        digitalWrite(motor_pin_4, LOW);      break;      case 2:  //0101        digitalWrite(motor_pin_1, LOW);        digitalWrite(motor_pin_2, LOW);        digitalWrite(motor_pin_3, HIGH);        digitalWrite(motor_pin_4, HIGH);      break;      case 3:  //1001        digitalWrite(motor_pin_1, LOW);        digitalWrite(motor_pin_2, LOW);        digitalWrite(motor_pin_3, LOW);        digitalWrite(motor_pin_4, HIGH);      break;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160830_898.jpg" alt="修改后"></p><ul><li>保存并关闭Stepper.cpp。</li></ul><h3 id="3-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#3-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="3. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>3. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c++"><code class="language-c++">/* * MotorKnob * * A stepper motor follows the turns of a potentiometer * (or other sensor) on analog input 0. * * http://www.arduino.cc/en/Reference/Stepper * This example code is in the public domain. */#include <Stepper.h>// change this to the number of steps on your motor#define STEPS 200// create an instance of the stepper class, specifying// the number of steps of the motor and the pins it's// attached toStepper stepper(STEPS, 2, 3, 4, 5);// the previous reading from the analog inputint previous = 0;void setup() {  // set the speed of the motor to 90 RPMs  stepper.setSpeed(90);}void loop() {  // get the sensor value  int val = analogRead(0);  // move a number of steps equal to the change in the  // sensor reading  stepper.step(val - previous);  // remember the previous value of the sensor  previous = val;}</code></pre><h3 id="4-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#4-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="4. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>4. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160831_803.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>步进电机跟随电位器旋转而转动。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160831_693.gif" alt="实验现象"></p><h2 id="4-实验分析"><a href="#4-实验分析" class="headerlink" title="4. 实验分析"></a>4. 实验分析</h2><p>程序中使用Stepper库，设置步进电机四相驱动引脚，设置转动速度。主循环中读取A0口模拟输入，与上次数据作比较，以上次数据为参考点驱动步进电机转动。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇26—步进电机</title>
      <link href="/posts/a153.html"/>
      <url>/posts/a153.html</url>
      
        <content type="html"><![CDATA[<p>步进电机是一种将电脉冲转化为角位移的执行机构。通俗一点讲：当步进驱动器接收到一个脉冲信号，它就驱动步进电机按设定的方向转动一个固定的角度（即步进角），多用于雕刻机、3D打印机等需要精确控制的设备。本篇使用ULN2003驱动五线四相减速步进电机。</p><h2 id="1-步进电机介绍"><a href="#1-步进电机介绍" class="headerlink" title="1. 步进电机介绍"></a>1. 步进电机介绍</h2><ul><li>步进电机每次能转动的最小角度叫做步距角。</li><li>每当步进电机接收到一个驱动信号后，步进电机将按照一定的方向转动一个固定的角度。</li><li>通过控制脉冲的个数来精确的控制步进电机的角位移量，通过控制脉冲的频率来控制电机转动的速度及加速度，从而达到调速的目的。</li><li>步进电机按照相数不同分为单相、双相、多相三种，励磁方式分为1相励磁方式和2相励磁方式。</li><li>本篇使用的步进电机型号为28BYJ-48，1相励磁方式驱动，通过给ABCD四相依次通电来实现转自不停转动。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160827_575.jpg" alt="步进电机"></p><h2 id="2-ULN2003驱动介绍"><a href="#2-ULN2003驱动介绍" class="headerlink" title="2. ULN2003驱动介绍"></a>2. ULN2003驱动介绍</h2><p>由于Arduino开发板的通用IO驱动能力有限，有些外设不能直接使用IO进行驱动，需要借助一些驱动电路间接控制大功率器件。ULN2003是大电流驱动阵列，多用于单片机、智能仪表、PLC、数字量输出卡等控制电路中，可直接驱动继电器等负载。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160828_567.jpg" alt="ULN2003内部结构"></p><h2 id="3-实验材料"><a href="#3-实验材料" class="headerlink" title="3. 实验材料"></a>3. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板连接线</li><li>ULN2003驱动板</li><li>步进电机</li></ul><h2 id="4-实验步骤"><a href="#4-实验步骤" class="headerlink" title="4. 实验步骤"></a>4. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>ULN2003驱动板上IN1、IN2、IN3、IN4分别连接UNO开发板的数字引脚2，3，4，5；驱动板电源输入+、-引脚分别连接UNO开发板的5V、GND。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160828_489.jpg" alt="驱动板"></p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160828_979.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160828_934.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c++"><code class="language-c++">/* * Stepper_Motor * 步进电机驱动，实现正反转 */void setup() {  // put your setup code here, to run once:  for (int i = 2; i < 6; i++) {    pinMode(i, OUTPUT);  }}void clockwise(int num){  for (int count = 0; count < num; count++)  {    for (int i = 2; i < 6; i++)    {      digitalWrite(i, HIGH);      delay(3);      digitalWrite(i, LOW);    }  }}void anticlockwise(int num){  for (int count = 0; count < num; count++)  {    for (int i = 5; i > 1; i--)    {      digitalWrite(i, HIGH);      delay(3);      digitalWrite(i, LOW);    }  }}void loop() {  // put your main code here, to run repeatedly:  clockwise(512);  delay(10);  anticlockwise(512);}</code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160829_733.jpg" alt="程序下载"></p><h2 id="5-实验现象"><a href="#5-实验现象" class="headerlink" title="5. 实验现象"></a>5. 实验现象</h2><p>步进电机顺时针、逆时针交替旋转。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160829_533.gif" alt="实验现象"></p><h2 id="6-实验分析"><a href="#6-实验分析" class="headerlink" title="6. 实验分析"></a>6. 实验分析</h2><p>程序通过ABCD四相通电顺序实现步进电机正反转控制。步进电机旋转一周，程序中循环次数为什么是512次呢？这是根据我们使用的步进电机参数计算而来的：</p><ul><li>步进电机电压5V，步距角5.625，减速比1：64</li><li>计算A-B-C-D通电一次转动的角度5.625X2X4/64=0.703125  (2是表示1相励磁方式每步是2倍的步距角，4表示走了4步， 64指电机减速比)  </li><li>转动360度循环ABCD通电的次数360/0.7031=512</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇25—红外遥控</title>
      <link href="/posts/9611.html"/>
      <url>/posts/9611.html</url>
      
        <content type="html"><![CDATA[<p>在日常生活中我们会接触到各式各样的遥控器，电视机、空调、机顶盒等都有专用的遥控器，很多智能手机也在软硬件上对红外遥控做了支持，可以集中遥控绝大部分家用电器。本篇介绍红外遥控相关原理及应用，通过红外遥控器控制Uno板载LED灯亮灭。</p><h2 id="1-红外遥控原理"><a href="#1-红外遥控原理" class="headerlink" title="1. 红外遥控原理"></a>1. 红外遥控原理</h2><p>红外遥控主要由红外发射和红外接收两部分组成。</p><p>红外发射和接收的信号其实都是一连串的二进制脉冲码，高低电平按照一定的时间规律变换来传递相应的信息。为了使其在无线传输过程中免受其他信号的干扰，通常都将信号调制在特定的载波频率上(38K红外载波信号)，通过红外发射二极管发射出去，而红外接收端则要将信号进行解调处理，还原成二进制脉冲码进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160825_788.jpg" alt="红外接收和红外遥控器"></p><p>红外接收头有三个引脚，如上图从左到右依次为VOUT、GND、VCC。红外遥控器发射的38K红外载波信号由遥控器里的编码芯片对其进行编码，具体编码方式和协议可在网上获取，这里不再展开。当按下遥控器按键时，遥控器发出红外载波信号，红外接收器接收到信号，程序对载波信号进行解码，通过数据码的不同来判断按下的是哪个键。</p><h2 id="2-红外遥控库安装"><a href="#2-红外遥控库安装" class="headerlink" title="2. 红外遥控库安装"></a>2. 红外遥控库安装</h2><p>在IDE中点击「项目」—「加载库」—「管理库」，查找「IRremote」进行安装。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160826_88.jpg" alt="安装库"></p><h2 id="3-实验材料"><a href="#3-实验材料" class="headerlink" title="3. 实验材料"></a>3. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>红外接收头</li><li>红外遥控器</li></ul><h2 id="4-实验步骤"><a href="#4-实验步骤" class="headerlink" title="4. 实验步骤"></a>4. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>红外接收头左侧VOUT连接开发板数字引脚11，GND和VCC分别连接开发板的GND和5V。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160826_342.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160826_967.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c++"><code class="language-c++">/* * IRrecvDemo * 红外控制，接收红外命令控制板载LED灯亮灭 */#include <IRremote.h>int RECV_PIN = 11;int LED_PIN = 13;IRrecv irrecv(RECV_PIN);decode_results results;void setup(){  Serial.begin(9600);  irrecv.enableIRIn(); // Start the receiver  pinMode(LED_PIN, OUTPUT);  digitalWrite(LED_PIN, HIGH);}void loop() {  if (irrecv.decode(&results)) {    Serial.println(results.value, HEX);    if (results.value == 0xFFA25D) //开灯的值    {      digitalWrite(LED_PIN, LOW);    } else if (results.value == 0xFF629D) //关灯的值    {      digitalWrite(LED_PIN, HIGH);    }    irrecv.resume(); // Receive the next value  }  delay(100);}</code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160826_64.jpg" alt="程序下载"></p><h2 id="5-实验现象"><a href="#5-实验现象" class="headerlink" title="5. 实验现象"></a>5. 实验现象</h2><p>按下程序中指定的按键，板载LED灯亮灭。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160827_778.gif" alt="实验现象"></p><h2 id="6-实验分析"><a href="#6-实验分析" class="headerlink" title="6. 实验分析"></a>6. 实验分析</h2><p>程序中引入IRremote库，当按下红外遥控器时，在串口监视器中可以看到不同按键的按键码，然后我们选取了两个按键码值进行条件控制，就可以实现遥控LED灯了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇24—继电器控制</title>
      <link href="/posts/1486.html"/>
      <url>/posts/1486.html</url>
      
        <content type="html"><![CDATA[<p>继电器是一种电子控制器件，是用较小的电流去控制较大电流的一种“自动开关”，通常应用于自动控制电路中起着自动调节、安全保护、转换电路等作用。 本篇介绍继电器的使用，通过串口发送命令来控制继电器动作。</p><h2 id="1-继电器介绍"><a href="#1-继电器介绍" class="headerlink" title="1. 继电器介绍"></a>1. 继电器介绍</h2><ul><li>继电器原理<br>电磁式继电器一般由铁芯、线圈、衔铁、触点簧片等组成的。只要在线圈两端加上一定的电压，线圈中就会流过一定的电流，从而产生电磁效应，衔铁就会在电磁力吸引的作用下克服返回弹簧的拉力吸向铁芯，从而带动衔铁的动触点与静触点（常开触点）吸合。当线圈断电后，电磁的吸力也随之消失，衔铁就会在弹簧的反作用力返回原来的位置，使动触点与原来的静触点（常闭触点）释放。这样吸合、释放，从而达到了在电路中的导通、切断的目的。对于继电器的“常开、常闭”触点，可以这样来区分：继电器线圈未通电时处于断开状态的静触点，称为“常开触点”；处于接通状态的静触点称为“常闭触点”。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160824_882.jpg" alt="继电器原理"></p><ul><li><p>继电器封装</p><p>不同的继电器根据其控制电压、触点耐压等不同，其外形和封装也各不相同。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160824_255.jpg" alt="不同继电器"></p><p>本次实验使用的继电器为6脚5V继电器，其外形如上图右侧，其封装引脚如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160824_394.jpg" alt="封装引脚"></p><p>其中2脚和5脚为线圈端，1脚和6脚为触点的COM公共端，3脚为常开端，4脚为常闭端。想要控制继电器只需要在线圈端加5V电压即可使常开端闭合。</p></li><li><p>继电器控制</p><p>一般继电器都有专用的控制电路，最常用的一种是使用PNP型三极管做为控制开关，通过控制三极管基极来导通三极管使得线圈形成回路。另一种是使用光耦进行控制，通过控制光耦来控制线圈工作。在控制高压设备时，通常继电器的触点还需要添加RC消火花电路。</p></li></ul><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>5V继电器</li><li>220Ω限流电阻</li><li>LED发光二极管</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>继电器的2脚和5脚分别连接开发板13引脚和GND。继电器公共端1脚(或6脚)连接5V，继电器常开端3脚连接限流电阻，电阻另一端连接LED灯正极，其负极连接GND。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160824_829.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160824_724.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c++"><code class="language-c++">/*   Relay   继电器控制，通过串口控制继电器开关LED灯*/int incomedate = 0;int relayPin = 13; //继电器引脚void setup() {  pinMode(relayPin, OUTPUT);  Serial.begin(9600); //设置串口波特率9600}void loop() {  if (Serial.available() > 0)//串口接收到数据  {    incomedate = Serial.read();//获取串口接收到的数据    if (incomedate == 'H')    {      digitalWrite(relayPin, HIGH);      Serial.println("LED OPEN!");    } else if (incomedate == 'L')    {      digitalWrite(relayPin, LOW);      Serial.println("LED CLOSE!");    }  }}</code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160825_438.jpg" alt="程序下载"></p><h3 id="4-打开串口监视器，调整波特率为9600，输入”H”，串口返回”LED-OPEN-”，继电器控制LED灯点亮；输入”L”，串口返回”LED-CLOSE-”，继电器控制LED灯熄灭。"><a href="#4-打开串口监视器，调整波特率为9600，输入”H”，串口返回”LED-OPEN-”，继电器控制LED灯点亮；输入”L”，串口返回”LED-CLOSE-”，继电器控制LED灯熄灭。" class="headerlink" title="4. 打开串口监视器，调整波特率为9600，输入”H”，串口返回”LED OPEN!”，继电器控制LED灯点亮；输入”L”，串口返回”LED CLOSE!”，继电器控制LED灯熄灭。"></a>4. 打开串口监视器，调整波特率为9600，输入”H”，串口返回”LED OPEN!”，继电器控制LED灯点亮；输入”L”，串口返回”LED CLOSE!”，继电器控制LED灯熄灭。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160825_470.jpg" alt="实验现象"></p><p>将实验中的5V控制LED灯换成220V控制白炽灯道理也是一样的，继电器使得我们能够控制各种高压外设。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇23—串口通讯</title>
      <link href="/posts/a4f2.html"/>
      <url>/posts/a4f2.html</url>
      
        <content type="html"><![CDATA[<p>在很多时候，Arduino需要和其他设备相互通讯，而最常见最简单的方式就是串口通讯。本篇介绍Arduino硬件串口通讯，了解相关函数的使用。</p><h2 id="1-硬件串口"><a href="#1-硬件串口" class="headerlink" title="1. 硬件串口"></a>1. 硬件串口</h2><p>在PC机上最常见的串行通讯协议是RS-232串行协议，而各种微控制器(单片机)上采用的是TTL串行协议，两者电平不同，需要经过相应电平转换才能进行相互通讯。</p><p>Arduino Uno R3开发板上，硬件串口位于Rx(0)和Tx(1)引脚上，Arduino的USB口通过转换芯片与这两个引脚连接。该转换芯片会通过USB接口在PC机上虚拟出一个用于Arduino通讯的串口，我们下载程序也是通过串口进行的。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160822_459.jpg" alt="硬件串口接口"></p><h2 id="2-相关函数介绍"><a href="#2-相关函数介绍" class="headerlink" title="2. 相关函数介绍"></a>2. 相关函数介绍</h2><p>Arduino提供的串口通讯函数非常丰富，详细介绍参考<a href="https://www.arduino.cc/reference/en/language/functions/communication/serial/" target="_blank" rel="noopener">Arduino官网串口使用指南</a>。</p><p><strong>Serial.begin()</strong></p><ul><li>描述：开启串口，通常置于setup()函数中。</li><li>原型：<ul><li><strong>Serial.begin(speed)</strong></li><li><strong>Serial.begin(speed, config)</strong></li></ul></li><li>参数：<ul><li>speed：波特率，一般取值9600,115200等。</li><li>config：设置数据位、校验位和停止位。默认SERIAL_8N1表示8个数据位，无校验位，1个停止位。</li></ul></li><li>返回值：无。</li></ul><p><strong>Serial.end()</strong></p><ul><li>描述：禁止串口传输。此时串口Rx和Tx可以作为数字IO引脚使用。</li><li>原型：<strong>Serial.end()</strong></li><li>参数：无。</li><li>返回值：无。</li></ul><p><strong>Serial.print()</strong></p><ul><li>描述：串口输出数据，写入字符数据到串口。</li><li>原型：<ul><li><strong>Serial.print(val)</strong></li><li><strong>Serial.print(val, format)</strong></li></ul></li><li>参数：<ul><li>val：打印的值，任意数据类型。</li><li>config：输出的数据格式。BIN(二进制)、OCT(八进制)、DEC(十进制)、HEX(十六进制)。对于浮点数，此参数指定要使用的小数位数。</li></ul></li><li>示例：<ul><li>Serial.print(78, BIN) 得到 “1001110”</li><li>Serial.print(78, OCT) 得到 “116”</li><li>Serial.print(78, DEC) 得到 “78”</li><li>Serial.print(78, HEX) 得到 “4E”</li><li>Serial.print(1.23456, 0) 得到 “1”</li><li>Serial.print(1.23456, 2) 得到 “1.23”</li><li>Serial.print(1.23456, 4) 得到 “1.2346”</li><li>Serial.print(‘N’) 得到 “N”</li><li>Serial.print(“Hello world.”) 得到 “Hello world.”</li></ul></li><li>返回值：返回写入的字节数。</li></ul><p><strong>Serial.println()</strong></p><ul><li>描述：串口输出数据并换行。</li><li>原型：<ul><li><strong>Serial.println(val)</strong></li><li><strong>Serial.println(val, format)</strong></li></ul></li><li>参数：<ul><li>val：打印的值，任意数据类型。</li><li>config：输出的数据格式。</li></ul></li><li>返回值：返回写入的字节数。</li></ul><p><strong>Serial.available()</strong></p><ul><li>描述：判断串口缓冲区的状态，返回从串口缓冲区读取的字节数。</li><li>原型：<strong>Serial.available()</strong></li><li>参数：无。</li><li>返回值：可读取的字节数。</li></ul><p><strong>Serial.read()</strong></p><ul><li>描述：读取串口数据，一次读一个字符，读完后删除已读数据。</li><li>原型：<strong>Serial.read()</strong></li><li>参数：无。</li><li>返回值：返回串口缓存中第一个可读字节，当没有可读数据时返回-1，整数类型。</li></ul><p><strong>Serial.readBytes()</strong></p><ul><li>描述：从串口读取指定长度的字符到缓存数组。</li><li>原型：<strong>Serial.readBytes(buffer, length)</strong></li><li>参数：<ul><li>buffer：缓存变量。</li><li>length：设定的读取长度。</li></ul></li><li>返回值：返回存入缓存的字符数。</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-通过数据线连接开发板到PC机。"><a href="#1-通过数据线连接开发板到PC机。" class="headerlink" title="1. 通过数据线连接开发板到PC机。"></a>1. 通过数据线连接开发板到PC机。</h3><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c++"><code class="language-c++">/*   Serial   串口通讯实验*/int incomedate = 0;void setup() {  Serial.begin(9600); //设置串口波特率9600  Serial.println(78, BIN);// "1001110"  Serial.println(78, OCT);// "116"  Serial.println(78, DEC);// "78"  Serial.println(78, HEX);// "4E"  Serial.println(1.23456, 0);// "1"  Serial.println(1.23456, 2);// "1.23"  Serial.println(1.23456, 4);// "1.2346"  Serial.println('N');// "N"  Serial.println("Hello world.");// "Hello world."}void loop() {  if (Serial.available() > 0)//串口接收到数据  {    incomedate = Serial.read();//获取串口接收到的数据    if (incomedate == 'H')    {      Serial.println("Good Job!");    }  }  delay(1000);}</code></pre><h3 id="3-设置好对应端口号和开发板类型进行程序下载。"><a href="#3-设置好对应端口号和开发板类型进行程序下载。" class="headerlink" title="3. 设置好对应端口号和开发板类型进行程序下载。"></a>3. 设置好对应端口号和开发板类型进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160823_905.jpg" alt="程序下载"></p><h3 id="4-打开串口监视器，设置波特率9600，观察串口打印信息。输入”H”，串口返回”Good-Job-”。"><a href="#4-打开串口监视器，设置波特率9600，观察串口打印信息。输入”H”，串口返回”Good-Job-”。" class="headerlink" title="4. 打开串口监视器，设置波特率9600，观察串口打印信息。输入”H”，串口返回”Good Job!”。"></a>4. 打开串口监视器，设置波特率9600，观察串口打印信息。输入”H”，串口返回”Good Job!”。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160823_480.jpg" alt="实验现象"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇22—74HC595扩展IO</title>
      <link href="/posts/d2dd.html"/>
      <url>/posts/d2dd.html</url>
      
        <content type="html"><![CDATA[<p>Arduino开发板的普通IO引脚是有限的，必要时要对IO口进行扩展，才能满足外部设备对IO口的需求。本篇介绍74HC595芯片，使用它来扩展Arduino的IO口，用3个IO来控制8路LED灯。</p><h2 id="1-74HC595介绍"><a href="#1-74HC595介绍" class="headerlink" title="1. 74HC595介绍"></a>1. 74HC595介绍</h2><p>74HC595芯片是一个串行输入，并行输出设备。其内部包括一个8位移位寄存器、一个存储器以及三态输出门电路，其中移位寄存器和存储器都有相互独立的时钟。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160820_667.jpg" alt="74HC595芯片"></p><h3 id="1-引脚说明"><a href="#1-引脚说明" class="headerlink" title="1. 引脚说明"></a>1. 引脚说明</h3><p>74HC595芯片引脚定义说明如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160821_921.jpg" alt="管脚定义"></p><ul><li><p>VCC、GND为芯片供电管脚，工作电压5V。</p></li><li><p>Q0~Q7这8个引脚是芯片的输出引脚。</p></li><li><p>DS引脚为串行输入引脚。我们需要将数据一位一位的写入该引脚。</p></li><li><p>STCP引脚为锁存引脚。当移位寄存器的8位数据全部传输完毕后，通过控制此引脚将数据复制到锁存器准备并行输出。</p></li><li><p>SHCP引脚为时钟引脚。通过控制此引脚将数据写入移位寄存器。</p></li><li><p>OE引脚为输出使能。其作用是控制锁存器里的数据是否最终输出到Q0-Q7输出引脚上。低电平时输出，高电平时不输出，本实验直接接在GND使其一直保持低电平输出数据。</p></li><li><p>MR是用来重置内部寄存器的引脚。低电平时重置内部寄存器。本实验直接连接在VCC上一直保持高电平。</p></li><li><p>Q7S引脚为串行输出引脚，专门用于芯片级联。</p></li></ul><h3 id="2-操作说明"><a href="#2-操作说明" class="headerlink" title="2. 操作说明"></a>2. 操作说明</h3><p>根据74HC595引脚说明，有三个重要的引脚：数据引脚(data)、锁存引脚(latch)、时钟引脚(clock)。</p><table><thead><tr><th>74HC595操作步骤</th><th>操作说明</th></tr></thead><tbody><tr><td>latch = LOW</td><td>只有为low时才可以输入数据</td></tr><tr><td>data</td><td>通过data传输数据第一位，HIGH/LOW</td></tr><tr><td>clock = HIGH</td><td>数据锁存</td></tr><tr><td>clock = LOW</td><td>准备下一个</td></tr><tr><td>data…</td><td>继续上面步骤，直到传输完成</td></tr><tr><td>clock = HIGH</td><td>储存全部的数据</td></tr><tr><td>clock = LOW</td><td>禁止数据再进行传输</td></tr><tr><td>latch = HIGH</td><td>并行送出数据</td></tr></tbody></table><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>74HC595芯片</li><li>8个220Ω限流电阻</li><li>8个LED发光二极管</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>8个LED发光二极管的负极接开发板GND,正极分别接入220Ω限流电阻，电阻另一端分别接入74HC595芯片的Q0~Q7输出引脚。</p><p>74HC595的VCC、MR引脚接入开发板5V，OE、GND引脚接入开发板的GND。DS、SHCP、STCP这三个控制引脚分别接入开发板的8、9、10数字引脚。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160821_441.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160821_192.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c++"><code class="language-c++">/*   Shift   74HC595扩展IO，串行驱动8路LED灯*/int latchPin = 10;//锁存引脚int clockPin = 9; //时钟引脚int dataPin = 8; //数据引脚void setup (){  pinMode(latchPin, OUTPUT);  pinMode(clockPin, OUTPUT);  pinMode(dataPin, OUTPUT); //让三个脚都是输出状态}void loop(){  for (int data = 0; data < 255; data++)  {    digitalWrite(latchPin, LOW); //将ST_CP口上加低电平让芯片准备好接收数据    shiftOut(dataPin, clockPin, LSBFIRST, data);    digitalWrite(latchPin, HIGH); //将ST_CP这个针脚恢复到高电平    delay(1000); //暂停1秒钟观看显示效果  }}</code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160821_201.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>8个LED灯移位进行亮灭显示。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="http://pt5w6zbiy.bkt.clouddn.com/201906160822_255.gif" alt="实验现象"></p><h2 id="5-函数介绍"><a href="#5-函数介绍" class="headerlink" title="5. 函数介绍"></a>5. 函数介绍</h2><p><strong>shiftOut()</strong></p><ul><li>描述：将数据在时钟引脚脉冲控制下按位移出写入到数字引脚。</li><li>函数原型：<br>  <strong>shiftOut(dataPin, clockPin, bitOrder, value)</strong></li><li>参数：<ul><li>dataPin: 数据输入引脚。</li><li>clockPin: 时钟引脚。</li><li>bitOrder: 移位顺序。MSBFIRST(高位在前)、LSBFIRST(低位在前)。</li><li>value: 需要移位的数据。</li></ul></li><li>返回值：没有。</li></ul><h2 id="6-实验分析"><a href="#6-实验分析" class="headerlink" title="6. 实验分析"></a>6. 实验分析</h2><p>程序中将74HC595三个控制引脚设置为输出模式，然后使用shiftOut()函数将数据进行移位写入74HC595的移位寄存器，然后通过控制锁存引脚将数据进行锁存输出。shiftOut()函数的value参数是一个字节长度，即每执行一次会将一个字节(最大值255)进行移位输出。如果移位的数据大于一个字节，需要执行两次shiftOut()函数，例如：</p><pre class=" language-c++"><code class="language-c++">//Do this for MSBFIRST serialint data = 500;// shift out highbyteshiftOut(dataPin, clock, MSBFIRST, (data >> 8));// shift out lowbyteshiftOut(dataPin, clock, MSBFIRST, data);// Or do this for LSBFIRST serialdata = 500;// shift out lowbyteshiftOut(dataPin, clock, LSBFIRST, data);// shift out highbyteshiftOut(dataPin, clock, LSBFIRST, (data >> 8));</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇21—点阵流动显示</title>
      <link href="/posts/2d91.html"/>
      <url>/posts/2d91.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401164337.jpg" alt=""></p><p>在各种公共场合看到的点阵屏大多都有流动显示效果，显示内容可以上下左右的滚动，本篇我们来实现点阵屏的流动显示。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>8*8点阵屏</li></ul><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>依然是前篇点阵屏电路连接方式。根据点阵屏管脚定义，点阵屏的[9, 14, 8, 12, 1, 7, 2, 5]分别连接开发板的[6,11, 5, 9, 14, 4, 15, 2]，点阵屏的[13, 3, 4, 10, 6, 11, 15, 16]分别连接开发板的[10,16, 17, 7, 3, 8, 12, 13]。</p><p>这里需要注意，Uno R3开发板的A0<del>A5也可以做普通GPIO使用，编号分别为14</del>19。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401164336.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401164339.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   Roll   点阵屏流动显示*/</span><span class="token keyword">int</span> leds<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点阵屏正极引脚</span><span class="token keyword">int</span> gnds<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点阵屏负极引脚</span><span class="token comment" spellcheck="true">//字库</span><span class="token keyword">char</span> test<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -0-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -1-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -2-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -3-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -4-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -5-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -6-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -7-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -8-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -9-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -A-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -B-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -C-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -D-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -E-</span>  <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// -F-</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//负极引脚拉高，熄灭所有LED</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ledclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将点阵屏正极ladies，负极拉高，关断显示</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//字符显示</span><span class="token keyword">void</span> <span class="token function">ledShow</span><span class="token punctuation">(</span><span class="token keyword">char</span> num<span class="token punctuation">,</span> <span class="token keyword">char</span> dat<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dat <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 0 0 0 0 0 0 0</span>    dat <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ledclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">120</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//控制流动显示内容</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//循环显示达到延时效果</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//8列循环扫描，达到点阵屏驱动效果</span>      <span class="token punctuation">{</span>        <span class="token function">ledShow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> test<span class="token punctuation">[</span>c <span class="token operator">+</span> a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401164338.jpg" alt="程序下载"></p><h3 id="4-程序下载后，点阵屏从右往左流动显示。"><a href="#4-程序下载后，点阵屏从右往左流动显示。" class="headerlink" title="4. 程序下载后，点阵屏从右往左流动显示。"></a>4. 程序下载后，点阵屏从右往左流动显示。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401164315.gif" alt="流动显示"></p><h3 id="5-我们对loop-部分的程序进行修改，来改变每次流动的列数。"><a href="#5-我们对loop-部分的程序进行修改，来改变每次流动的列数。" class="headerlink" title="5. 我们对loop()部分的程序进行修改，来改变每次流动的列数。"></a>5. 我们对loop()部分的程序进行修改，来改变每次流动的列数。</h3><pre class=" language-c++"><code class="language-c++">void loop() {  for (int a = 0; a < 16; a++) //控制流动显示内容  {    for (int i = 0 ; i < 200 ; i++)//循环显示达到延时效果    {      for (int c = 0; c < 8; c++) //8列循环扫描，达到点阵屏驱动效果      {        ledShow(c, test[c + a*8]);      }    }  }}</code></pre><h3 id="6-当每次移动8列时，就会整屏覆盖翻页显示，效果如下："><a href="#6-当每次移动8列时，就会整屏覆盖翻页显示，效果如下：" class="headerlink" title="6. 当每次移动8列时，就会整屏覆盖翻页显示，效果如下："></a>6. 当每次移动8列时，就会整屏覆盖翻页显示，效果如下：</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401164240.gif" alt="翻页显示"></p><h2 id="3-实验分析"><a href="#3-实验分析" class="headerlink" title="3. 实验分析"></a>3. 实验分析</h2><ol><li>程序中定义了一个数组用于存储需要显示的字库，每8个表示一个字符，然后通过ledShow()函数来进行解析显示。使用for循环控制指定的列然后将传入的字符数据进行按位与，取出每一位进行操作。</li><li>在loop()中三重for循环，最里面控制8列扫描显示，中间for循环用于控制显示时间，最外层for循环用于控制流动位置。</li><li>依次移动需要显示的字符数据，就达到了流动显示效果。可以控制每次移动的间距，当每次移动8列就会实现整屏覆盖的效果。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 点阵屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇20—心动点阵</title>
      <link href="/posts/e6ca.html"/>
      <url>/posts/e6ca.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163757.jpg" alt=""></p><p>本篇继续学习LED点阵屏的使用，实现心型跳动效果。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>8*8点阵屏</li></ul><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>根据点阵屏管脚定义，点阵屏的[9, 14, 8, 12, 1, 7, 2, 5]分别连接开发板的[6,11, 5, 9, 14, 4, 15, 2]，这8个引脚为LED的正极；</p><p>点阵屏的[13, 3, 4, 10, 6, 11, 15, 16]分别连接开发板的[10,16, 17, 7, 3, 8, 12, 13]，这8个引脚为LED的负极。</p><p>这里需要注意，Uno R3开发板的A0<del>A5也可以做普通GPIO使用，编号分别为14</del>19。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163800.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163758.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   Heart   点阵屏心型跳动显示*/</span><span class="token keyword">int</span> leds<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点阵屏正极引脚</span><span class="token keyword">int</span> gnds<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点阵屏负极引脚</span><span class="token comment" spellcheck="true">//大“心型”的数据</span><span class="token keyword">int</span> table1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小“心型”的数据</span><span class="token keyword">int</span> table2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//负极引脚拉高，熄灭所有LED</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ledclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将点阵屏正极ladies，负极拉高，关断显示</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//心型显示函数</span><span class="token keyword">void</span> <span class="token function">ledShow</span><span class="token punctuation">(</span><span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ledclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//利用for循环达到刷新延时的效果</span>  <span class="token punctuation">{</span>    <span class="token function">ledShow</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用for循环达到刷新延时的效果</span>  <span class="token punctuation">{</span>    <span class="token function">ledShow</span><span class="token punctuation">(</span>table2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163759.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>点阵屏上心型在不断跳动。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163801.gif" alt="实验现象"></p><h2 id="4-实验分析"><a href="#4-实验分析" class="headerlink" title="4. 实验分析"></a>4. 实验分析</h2><p>程序中定义了两个二维数组，分别用来存储两个不同大小的心型显示数据，在显示函数中通过两个for循环来遍历数组。在loop()中没有使用delay()函数来做延时处理，因为与数码管类似，这种LED显示设备需要不断刷新，delay()函数使程序暂停等待延时会造成显示闪烁甚至熄灭的情况。使用for循环来控制显示的次数，进而控制显示时间来达到延时效果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 点阵屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇19—点阵屏</title>
      <link href="/posts/dc39.html"/>
      <url>/posts/dc39.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163342.jpg" alt=""></p><p>将8个LED发光二极管封装在一起就组成了数码管，将更多的LED组合在一起就组成了点阵屏。本篇我们来认识点阵屏，通过Arduino的IO口直接驱动点阵屏来了解其驱动方式。</p><h2 id="1-点阵屏介绍"><a href="#1-点阵屏介绍" class="headerlink" title="1. 点阵屏介绍"></a>1. 点阵屏介绍</h2><p>LED点阵屏由LED发光二极管组成，通过控制LED亮灭来显示文字、图片、动画、视频等，被广泛应用于公共场合做信息展示，如广告屏、公告牌等。</p><p>LED点阵屏按照LED发光颜色可分为单色、双色、三色灯等，可显示红、黄、绿甚至是真彩色。根据LED的数量又分为4x4、8x8、16x16等不同类型。多色点阵屏工艺要求相对较高，需要考虑多种颜色混合时对色彩的影响。这里我们通过单色8x8点阵屏来了解其原理。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163345.jpg" alt="8x8点阵屏"></p><p>不同点阵屏封装不同，8x8点阵屏由8行8列共64个LED灯组成，其内部结构如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163346.jpg" alt="8x8内部结构"></p><p>每个LED放置在行线和列线的交叉点上，当对应的某一行电平拉高，某一列电拉低，则对应交叉点的LED就会点亮。</p><p>8x8点阵屏有16个管脚，将有丝印的一边朝下，逆时针编号为1<del>8，9</del>16。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163348.jpg" alt="8X8点阵管脚"></p><p>其对应内部管脚定义如下如所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163347.jpg" alt="点阵屏管脚定义"></p><p>比如我们要点亮第一行第一列LED灯，则对应将点阵屏的第9脚拉高，第13脚拉低，其他LED控制以此类推即可。</p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>8*8点阵屏</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>根据点阵屏管脚定义，点阵屏的[9, 14, 8, 12, 1, 7, 2, 5]分别连接开发板的[6,11, 5, 9, 14, 4, 15, 2]，这8个引脚为LED的正极；</p><p>点阵屏的[13, 3, 4, 10, 6, 11, 15, 16]分别连接开发板的[10,16, 17, 7, 3, 8, 12, 13]，这8个引脚为LED的负极。</p><p>这里需要注意，Uno R3开发板的A0<del>A5也可以做普通GPIO使用，编号分别为14</del>19。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163341.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163343.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Matrix * 点阵屏显示驱动 */</span><span class="token keyword">int</span> leds<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点阵屏正极引脚</span><span class="token keyword">int</span> gnds<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点阵屏负极引脚</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//负极引脚拉高，熄灭所有LED</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ledopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将点阵屏正极拉高，负极拉低，开启显示</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ledclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将点阵屏正极ladies，负极拉高，关断显示</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//逐列扫描</span><span class="token keyword">void</span> <span class="token function">ledCol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ledclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//逐行扫描</span><span class="token keyword">void</span> <span class="token function">ledRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>gnds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ledclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">ledopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全部打开</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ledclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全部关闭</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ledCol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//列扫描</span>  <span class="token function">ledRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//行扫描</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163344.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>LED点阵屏点亮然后熄灭，然后逐列点亮，逐行点亮。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163325.gif" alt="实验现象"></p><h2 id="5-实验分析"><a href="#5-实验分析" class="headerlink" title="5. 实验分析"></a>5. 实验分析</h2><p>LED点阵屏不过是多个LED组合在一起来驱动，基本的驱动方式是逐行扫描或者逐列扫描。通过两个for循环嵌套来进行操作，外部循环控制列，内部循环遍历行，或者外部循环控制行，内部循环遍历列，相对操作还是非常简单的。当逐行或者逐列扫描足够快的时候，人眼就会因为视觉暂存而看到同时点亮的效果。</p><p>当对多块点阵屏进行操作时，使用IO引脚直接驱动的方式就显得不切实际了，一方面这需要占用很多的IO口，另一方面IO驱动能力毕竟有限，所以点阵屏还有专门的驱动电路和IC芯片来满足更高的应用要求。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 点阵屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇18—数字时钟</title>
      <link href="/posts/b847.html"/>
      <url>/posts/b847.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162958.jpg" alt=""></p><p>Arduino不但有外部中断，还有定时器中断，不同Arduino开发板其定时器数量及性能也各不相同，这取决于开发板主控制器。Uno R3开发板有三个定时器，本篇通过使用定时器库「TimerOne」来更新数码管显示，制作一个数字时钟。</p><p>Arduino提供了丰富的库，关于定时器的库包括「TimerOne」、「MsTimer2」等，更多的支持库的信息可从官网获取<a href="https://playground.arduino.cc/Main/LibraryList" target="_blank" rel="noopener">Libraries for Arduino</a>。</p><h2 id="1-定时器库安装"><a href="#1-定时器库安装" class="headerlink" title="1. 定时器库安装"></a>1. 定时器库安装</h2><p>在IDE中点击「项目」—「加载库」—「管理库」，查找「TimerOne」进行安装。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163015.jpg" alt="安装库"></p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>四位共阴极数码管</li><li>4个220Ω限流电阻</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>根据四位数码管的引脚图，a,b,c,d,e,f,g,dp引脚分别连接开发板的数字引脚7，6，5，10，11，8，9，4。数码管的1，2，3，4引脚分别串联220Ω限流电阻，电阻另一端分别连接开发板的数字引脚2，3，12，13。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163040.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163023.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   SevTimer   使用定时器驱动四位数码管实现数字时钟显示*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"TimerOne.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SevSeg.h"</span></span>SevSeg sevseg<span class="token punctuation">;</span><span class="token keyword">int</span> Fen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> Miao <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>byte numDigits <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管位数</span>byte digitPins<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管公共极连接Arduino的引脚</span>byte segmentPins<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管a,b,c,d,e,f,g,dp对应引脚</span>byte hardwareConfig <span class="token operator">=</span> COMMON_CATHODE <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 共阴极数码管</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sevseg<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>hardwareConfig<span class="token punctuation">,</span> numDigits<span class="token punctuation">,</span> digitPins<span class="token punctuation">,</span> segmentPins<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化数码管</span>  Timer1<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化定时器为1s</span>  Timer1<span class="token punctuation">.</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span> timerIsr <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置中断回调函数</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sevseg<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>Fen <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> Miao<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置要显示的数据，不显示小数点</span>  sevseg<span class="token punctuation">.</span><span class="token function">refreshDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须重复运行刷新数码管显示</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">timerIsr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定时器中断处理函数</span><span class="token punctuation">{</span>  Miao<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Miao <span class="token operator">></span> <span class="token number">59</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Miao <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Fen<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Fen <span class="token operator">></span> <span class="token number">59</span><span class="token punctuation">)</span>      Fen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163018.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>数码管1秒计数一次，满60秒分钟加一，实现数字时钟效果。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401163030.gif" alt="实验现象"></p><h2 id="5-实验分析"><a href="#5-实验分析" class="headerlink" title="5. 实验分析"></a>5. 实验分析</h2><p>数码管驱动依旧使用「SevSeg」，具体使用方法在前面文章有所介绍。在setup()中使用 Timer1.initialize(1000000)来初始化定时器，括号内为定时周期，以微妙为单位，所以这里的1000000为1秒。然后使用Timer1.attachInterrupt( timerIsr )来设置中断回调函数。我们在程序中要实现timerIsr()函数，在里面实现分钟和秒数的控制。</p><p>有了定时器，有了数码管，我们可以很方便的实现一些跟时钟有关的制作，你可以结合数码管和蜂鸣器，来实现倒计时提示的制作。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 数码管 </tag>
            
            <tag> 时钟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇17—四位数码管的驱动</title>
      <link href="/posts/ddf7.html"/>
      <url>/posts/ddf7.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162619.jpg" alt=""></p><p>本篇介绍四位数码管的使用，通过数码管库驱动四位数码管从0开始累加显示数字。</p><h2 id="1-四位数码管介绍"><a href="#1-四位数码管介绍" class="headerlink" title="1. 四位数码管介绍"></a>1. 四位数码管介绍</h2><p>根据实际需要，把多个一位数码管封装在一起就成了多位数码管。常见的有两位、三位、四位、五位、六位等。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162626.jpg" alt="多位数码管"></p><p>数码管根据位数不同，其封装的引脚也各不相同。但其内部都是将单个数码管的段选线a,b,c,d,e,f,g,dp对应连接在一起，公共极则相互独立。使用时分别通过控制不同的位选线（即单个数码管的公共极）来控制单个数码管的显示。以人眼难以分辨的速度进行刷新显示，即可达到多个数码管同时显示的效果。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162623.jpg" alt="四位数码管"></p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>四位共阴极数码管</li><li>4个220Ω限流电阻</li></ul><p>四位数码管引脚分布如下图所示，其中1，2，3，4表示对应位数码管的公共极。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162630.jpg" alt="四位数码管引脚图"></p><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3.实验步骤"></a>3.实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>本次实验连线非常多，要注意不要接错。根据四位数码管的引脚图，a,b,c,d,e,f,g,dp引脚分别连接开发板的数字引脚7，6，5，10，11，8，9，4。数码管的1，2，3，4引脚分别串联220Ω限流电阻，电阻另一端分别连接开发板的数字引脚2，3，12，13。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162644.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162634.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * SevSegFour * 驱动四位数码管显示0到9999 */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SevSeg.h"</span></span>SevSeg sevseg<span class="token punctuation">;</span>byte numDigits <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管位数</span>byte digitPins<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管公共极连接Arduino的引脚</span>byte segmentPins<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管a,b,c,d,e,f,g,dp对应引脚</span>byte hardwareConfig <span class="token operator">=</span> COMMON_CATHODE <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 共阴极数码管</span><span class="token keyword">int</span> numToShow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> delaycount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sevseg<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>hardwareConfig<span class="token punctuation">,</span> numDigits<span class="token punctuation">,</span> digitPins<span class="token punctuation">,</span> segmentPins<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化数码管</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  delaycount<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>delaycount  <span class="token operator">==</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//通过变量自加来达到延时效果，如果使用delay函数则会打断数码管显示</span>    delaycount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    numToShow<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numToShow <span class="token operator">></span> <span class="token number">9999</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    numToShow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sevseg<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>numToShow<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置要显示的数据，不显示小数点</span>  sevseg<span class="token punctuation">.</span><span class="token function">refreshDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须重复运行刷新数码管显示</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162639.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>数码管从0开始累加显示数据。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162648.gif" alt="实验现象"></p><h2 id="5-实验分析"><a href="#5-实验分析" class="headerlink" title="5. 实验分析"></a>5. 实验分析</h2><p>程序中根据实验原理图，通过数码管库函数进行数码管初始化，不断对numToShow变量进行累加，然后对数码管进行设置数据、刷新显示的操作。在程序中我们没有使用delay()函数进行延时，而是通过不断累加delaycount变量，在其达到理想阈值时对numToShow变量进行累加。</p><p>因为数码管需要不断重复刷新数据才能保持显示，若使用delay()进行延时，则程序将停止进行等待，这段时间数码管得不到刷新，显示就会受到影响，数码管会变暗、闪烁甚至熄灭。更加理想的做法是通过定时器来对数码管进行刷新。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇16—数码管库的使用</title>
      <link href="/posts/554d.html"/>
      <url>/posts/554d.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162320.jpg" alt=""></p><p>Arduino官方提供了丰富的驱动库来方便对外设进行操作，很多爱好者也在开源精神下提供了很多第三方库。本篇介绍数码管库的使用，通过读取电位器输入，使用数码管库驱动数码管显示对应数据。</p><p>SevSeg库是数码管驱动库，常用于对4位数码管的驱动，该库可从Arduino IDE管理库中搜索安装，也可从github中获取，<a href="https://github.com/DeanIsMe/SevSeg" target="_blank" rel="noopener">github地址</a>。</p><h2 id="1-数码管库安装"><a href="#1-数码管库安装" class="headerlink" title="1.数码管库安装"></a>1.数码管库安装</h2><h3 id="1-启动Arduino-IDE，点击「项目」—「加载库」—「管理库」。"><a href="#1-启动Arduino-IDE，点击「项目」—「加载库」—「管理库」。" class="headerlink" title="1. 启动Arduino IDE，点击「项目」—「加载库」—「管理库」。"></a>1. 启动Arduino IDE，点击「项目」—「加载库」—「管理库」。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162324.jpg" alt="管理库"></p><h3 id="2-查找「SevSeg」，可以找到两个库，我们选择第一个，进行安装。"><a href="#2-查找「SevSeg」，可以找到两个库，我们选择第一个，进行安装。" class="headerlink" title="2. 查找「SevSeg」，可以找到两个库，我们选择第一个，进行安装。"></a>2. 查找「SevSeg」，可以找到两个库，我们选择第一个，进行安装。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162328.jpg" alt="安装库"></p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>共阴极数码管</li><li>1个220Ω限流电阻</li><li>电位器</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>数码管的A,B,C,D,E,F,G,DP引脚分别接入开发板的数字管脚7，6，5，10，11，8，9，4。数码管公共端接限流电阻，电阻另一端接数字管脚3。电位器中间管脚接A0，两端分别接5V和GND。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162332.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162336.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * SevSeg * 使用数码管库驱动数码管，根据A0模拟输入显示对应数字 */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SevSeg.h"</span></span>SevSeg sevseg<span class="token punctuation">;</span>byte numDigits <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管位数</span>byte digitPins<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管公共极连接Arduino的引脚</span>byte segmentPins<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管a,b,c,d,e,f,g,dp对应引脚</span>byte hardwareConfig <span class="token operator">=</span> COMMON_CATHODE <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 共阴极数码管</span><span class="token keyword">int</span> readValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存读到的模拟值</span><span class="token keyword">int</span> showValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需要显示的数据</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sevseg<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>hardwareConfig<span class="token punctuation">,</span> numDigits<span class="token punctuation">,</span> digitPins<span class="token punctuation">,</span> segmentPins<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化数码管</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  readValue <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>A0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取A0模拟口的数值（0-5V 对应0-1023取值）</span>  showValue <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>readValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1023</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将0-1023之间的数据映射成0到9之间的数据</span>  sevseg<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>showValue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数码管显示</span>  sevseg<span class="token punctuation">.</span><span class="token function">refreshDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须重复运行刷新数码管显示</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162340.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>随着电位器的转动，数码管显示0到9的数字。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401162345.gif" alt="实验现象"></p><h2 id="5-库函数介绍"><a href="#5-库函数介绍" class="headerlink" title="5. 库函数介绍"></a>5. 库函数介绍</h2><h3 id="1-sevseg-begin-hardwareConfig-numDigits-digitPins-segmentPins-函数："><a href="#1-sevseg-begin-hardwareConfig-numDigits-digitPins-segmentPins-函数：" class="headerlink" title="1. sevseg.begin(hardwareConfig, numDigits, digitPins, segmentPins)函数："></a>1. sevseg.begin(hardwareConfig, numDigits, digitPins, segmentPins)函数：</h3><ul><li><strong>hardwareConfig</strong>：使用的是共阳极数码管还是共阴极数码管。<ul><li><strong>COMMON_CATHODE</strong>：共阴极。</li><li><strong>COMMON_ANODE</strong>：共阳极。</li></ul></li><li><strong>numDigits</strong>：数码管位数，我们这里使用的是一位数码管，故其值设置为1。</li><li><strong>digitPins</strong>：数组形式，用来存储数码管公共极连接的引脚号。此库多用来驱动四位数码管，本实验中只用一位，故数组第一个成员为3(对应实际电路连接)，其他成员填入未使用的引脚即可。</li><li><strong>segmentPins</strong>：数组形式，用来存储数码管从a到dp所对应连接的引脚号。</li></ul><h3 id="2-sevseg-setNumber-numToShow-decPlaces-函数："><a href="#2-sevseg-setNumber-numToShow-decPlaces-函数：" class="headerlink" title="2. sevseg.setNumber(numToShow, decPlaces)函数："></a>2. sevseg.setNumber(numToShow, decPlaces)函数：</h3><ul><li><strong>numToShow</strong>：要显示的数据，可以为整数、浮点数。</li><li><strong>decPlaces</strong>：小数点显示的位置，从最低有效位开始计算，若省略或者设置为-1则表示不显示小数点。</li></ul><h3 id="3-sevseg-refreshDisplay-函数："><a href="#3-sevseg-refreshDisplay-函数：" class="headerlink" title="3. sevseg.refreshDisplay()函数："></a>3. sevseg.refreshDisplay()函数：</h3><p>此函数需要不断重复执行，反复刷新才能使数码管显示。若程序中有其他延时则会对显示产生影响。</p><h2 id="6-实验分析"><a href="#6-实验分析" class="headerlink" title="6. 实验分析"></a>6. 实验分析</h2><p>程序中使用SevSeg驱动库，根据实际电路连接进行库的初始化。在loop()函数中，读取A0模拟输入引脚的数据，通过map()函数重新把数据映射成数字0到9，然后使用sevseg.setNumber()函数进行数据设置，然后通过显示刷新函数进行刷新显示。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇15—随机骰子</title>
      <link href="/posts/8d40.html"/>
      <url>/posts/8d40.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161929.jpg" alt=""></p><p>上一篇介绍了数码管的使用，一位数码管可显示数字0到9。本篇使用random()函数产生随机数并在数码管上进行显示，制作一个随机骰子。</p><p>在Arduino中，random()函数用来产生伪随机数，可以传入一个区间，产生此区间内的随机数。通常情况下，在使用random()函数之前，需要使用randomSeed()来初始化随机数生成器，指定一个随机数种子。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>共阴极数码管</li><li>1个220Ω限流电阻</li></ul><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>数码管的A,B,C,D,E,F,G,DP引脚分别接入开发板的数字管脚7，6，5，10，11，8，9，4。数码管公共端接限流电阻，电阻另一端接GND。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161946.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161935.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   Random   通过Random随机显示0到9的数字*/</span><span class="token comment" spellcheck="true">//设置控制各段的数字IO脚，具体几号引脚对应哪一段，来源为数码管官方引脚图。</span><span class="token keyword">int</span> pin_a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_e <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_f <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_g <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_p <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据共阴极数码管段码表定义0~9显示的各段开关状态</span><span class="token keyword">int</span> numTable<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//1为点亮，0为关闭</span>  <span class="token comment" spellcheck="true">//a  b  c  d  e  f  g  dp</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//0</span>  <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//1</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//2</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//3</span>  <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//4</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//5</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//6</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//7</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//8</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置4～11引脚为输出模式</span>  <span class="token punctuation">}</span>  <span class="token function">randomSeed</span><span class="token punctuation">(</span><span class="token function">analogRead</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据索引显示数字</span><span class="token keyword">void</span> <span class="token function">showNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_a<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置a 引脚的电平</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_b<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置b 引脚的电平</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_c<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置c 引脚的电平</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_d<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置d 引脚的电平</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_e<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置e 引脚的电平</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_f<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置f 引脚的电平</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_g<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置g 引脚的电平</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_p<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置dp引脚的电平</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  num <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//产生随机数</span>  <span class="token function">showNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示随机数</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161941.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>随机显示0到9之间的数字。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161952.gif" alt="实验现象"></p><h2 id="4-函数介绍"><a href="#4-函数介绍" class="headerlink" title="4. 函数介绍"></a>4. 函数介绍</h2><p><strong>random()</strong></p><ul><li>描述：生成伪随机数。</li><li>函数原型：<ul><li><strong>random(max)</strong></li><li><strong>random(min,max)</strong></li></ul></li><li>参数：<ul><li>min: 随机数区间下限值，且包括在内。此参数可选，省略则从0开始。</li><li>max: 随机数区间上限值，且不包括在内。</li></ul></li><li>返回值：min和max-1之间的随机数。</li></ul><p><strong>randomSeed()</strong></p><ul><li>描述：初始化随机数生成器。</li><li>函数原型：<strong>randomSeed(seed)</strong></li><li>参数：用于初始化伪随机序列的数字，随机数种子。</li><li>返回值：没有。</li></ul><h2 id="5-实验分析"><a href="#5-实验分析" class="headerlink" title="5. 实验分析"></a>5. 实验分析</h2><p>程序中通过randomSeed()函数来初始化随机数生成器。当模拟管脚0悬空时，使用analogRead(0)读取到的是不确定的模拟噪声，用它来做随机种子，可获取到更加理想的随机数。在使用random()函数时，参数中区间上限是不包括在内的。比如想生成[10,20]之间的随机数，则应该这样写：random(10,21)。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇14—跳动的数码管</title>
      <link href="/posts/c280.html"/>
      <url>/posts/c280.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401160937.jpg" alt=""></p><p>本篇介绍数码管显示器件，通过控制一位共阴极数码管动态显示数字0到9来了解数码管的使用。</p><h2 id="1-数码管介绍"><a href="#1-数码管介绍" class="headerlink" title="1. 数码管介绍"></a>1. 数码管介绍</h2><p>数码管，又称LED数码管，是常见的用来显示数字的电子器件。通常由八段发光二极管封装在一起组成“8”字形状，外加一个小数点。数码管每一段都是一个独立的LED，通过控制相应段LED的亮灭使其组成相应数字形状来显示数字。</p><p>数码管的8个LED并联在一起，根据公共管脚的不同，分为共阳极数码管和共阴极数码管两种。其区别就是公共管脚是LED灯的正极还是负极。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161233.jpg" alt="数码管内部结构"></p><p>如上图，数码管8个段分别命名为A,B,C,D,E,F,G,DP，其封装共10个引脚，其中上下方正中间的是公共极，其他引脚分别对应8个LED的另一端。</p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>共阴极数码管</li><li>1个220Ω限流电阻</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161439.jpg" alt="数码管显示"></p><p>那么如何让数码管来显示数字呢？比如显示数字0，我们只需要点亮A,B,C,D,E,F段LED，熄灭G,DP段LED即可。</p><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>数码管的A,B,C,D,E,F,G,DP引脚分别接入开发板的数字管脚7，6，5，10，11，8，9，4。数码管公共端接限流电阻，电阻另一端接GND。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161605.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161755.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*NixieTube控制共阴极数码管显示数字0到9*/</span><span class="token comment" spellcheck="true">//设置控制各段的数字IO脚，具体几号引脚对应哪一段，来源为数码管官方引脚图。</span><span class="token keyword">int</span> pin_a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_e <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_f <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_g <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">int</span> pin_p <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据共阴极数码管段码表定义0~9显示的各段开关状态</span><span class="token keyword">int</span> numTable<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//1为点亮，0为关闭</span><span class="token comment" spellcheck="true">//a  b  c  d  e  f  g  dp</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//0</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//1</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//2</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//3</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//4</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//5</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//6</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//7</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//8</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">pinMode</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置4～11引脚为输出模式</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//以此显示数字0到9</span><span class="token punctuation">{</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_a<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置a 引脚的电平</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_b<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置b 引脚的电平</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_c<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置c 引脚的电平</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_d<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置d 引脚的电平</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_e<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置e 引脚的电平</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_f<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置f 引脚的电平</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_g<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置g 引脚的电平</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin_p<span class="token punctuation">,</span> numTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置dp引脚的电平</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161831.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>数码管循环显示数字0到9。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401161837.gif" alt="实验现象"></p><h2 id="4-实验分析"><a href="#4-实验分析" class="headerlink" title="4. 实验分析"></a>4. 实验分析</h2><p>程序中定义了一个二位数组用来存储0到9的段码显示。然后在loop中通过for()循环遍历显示0到9，每个数字分别读取对应的段码表来控制相应段LED的亮灭。</p><p>根据使用场所和需求的不同，LED被封装成不同类型的数码管，但其基本原理都是相同的，都需要控制每一个LED的亮灭最终拼凑成需要显示的数字、字母甚至是汉字。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇13—外部中断</title>
      <link href="/posts/4366.html"/>
      <url>/posts/4366.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155651.jpg" alt=""></p><p>本篇介绍Arduino外部中断的使用，通过外部中断检测震动开关的触发来控制LED灯亮灭。</p><h2 id="1-中断介绍"><a href="#1-中断介绍" class="headerlink" title="1. 中断介绍"></a>1. 中断介绍</h2><p>我们已经知道，Arduino程序是在loop()中不断的循环的。在程序的运行中，我们时常需要监控一些事件的发生，比如对某一传感器的返回数据进行解析。使用轮询的方式检测，效率比较低，而且随着程序功能增加，轮询到指定功能时需要等待的时间变长。而使用中断方式检测，可以到达实时检测的效果。</p><p>中断程序可以看作是一段独立于主程序之外的程序，当中断触发时，控制器会暂停当前正在运行的主程序，而跳转去运行中断程序，中断程序运行完后，会再回到之前主程序暂停的位置，继续运行主程序。如此便可做到实时响应处理事件的效果。</p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>1个LED灯</li><li>1个220Ω限流电阻</li><li>1个震动开关</li></ul><p>震动开关，即震动传感器，根据其结构的不同又分为弹簧开关和滚珠开关。</p><ul><li><p>弹簧开关，其内部由一根中心金属导电脚和环绕在其外部的弹簧导电脚组成。弹簧震动时会接触到中心导电脚，形成短路闭合状态；</p></li><li><p>滚珠开关，其内部包含有一颗金属滚珠，当震动时滚珠滚动短路两个导电脚，形成短路闭合状态。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155720.jpg" alt="震动开关"></p><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>直插式LED灯负极接开发板GND，正极接220Ω限流电阻，电阻另一端接开发板数字9引脚。震动开关一端接开发板GND，另一端接数字引脚2。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155733.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155748.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   ShakeSwitch   中断检测振动传感器，控制LED灯亮灭*/</span><span class="token keyword">int</span> SensorLED <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//定义LED为数字引脚9</span><span class="token keyword">int</span> SensorINPUT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//连接震动开关到中断0，也就是数字引脚2</span><span class="token keyword">char</span> state <span class="token operator">=</span> LOW<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>SensorLED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//LED为输出模式</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>SensorINPUT<span class="token punctuation">,</span> INPUT_PULLUP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//震动开关为输入模式</span>  <span class="token comment" spellcheck="true">//下降沿触发，触发中断0，调用blink函数</span>  <span class="token function">attachInterrupt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> blink<span class="token punctuation">,</span> FALLING<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> HIGH<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果state为HIGH</span>    state <span class="token operator">=</span> LOW<span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>SensorLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 亮灯</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//延时500ms</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>SensorLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 否则，关灯</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">blink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//中断函数blink()</span>  state <span class="token operator">=</span> <span class="token operator">!</span>state<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//一旦中断触发，state状态反转</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155808.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>触发震动后，LED灯点亮一段时间后熄灭。再次触发震动再次点亮。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155822.gif" alt="实验现象"></p><h2 id="5-函数介绍"><a href="#5-函数介绍" class="headerlink" title="5. 函数介绍"></a>5. 函数介绍</h2><p><strong>attachInterrupt()</strong></p><ul><li>描述：外部中断配置函数。</li><li>函数原型：<strong>attachInterrupt(interrupt, ISR, mode)</strong></li><li>参数：<ul><li>interrupt: 中断号。不同Arduino开发板中断号不同。Uno R3有两个外部中断，分别为数字管脚2(中断0)和数字管脚3(中断1)。</li><li>ISR: 中断处理函数。此函数不带参数，没有返回值。</li><li>mode: 中断触发方式。<ul><li><strong>LOW</strong>: 低电平触发。</li><li><strong>CHANGE</strong>:管脚状态改变触发。</li><li><strong>RISING</strong>:上升沿触发。</li><li><strong>FALLING</strong>:下降沿触发。</li></ul></li></ul></li><li>返回值：无。</li></ul><h2 id="6-实验分析"><a href="#6-实验分析" class="headerlink" title="6. 实验分析"></a>6. 实验分析</h2><p>通过attachInterrupt()函数注册数字管脚2为外部中断，触发方式为下降沿触发。中断处理函数blink()中每触发一次翻转一次state的状态。loop()函数中通过state状态来控制LED灯亮灭。</p><p>中断是非常实用的功能，它释放了CPU资源来做更多的事情。很多处理器、控制器都有中断功能，更高级的还包括中断优先级「多个中断同时触发时处理先后问题」和中断嵌套「中断中的中断」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 中断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇12—火焰报警器</title>
      <link href="/posts/ede5.html"/>
      <url>/posts/ede5.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155436.jpg" alt=""></p><p>本篇介绍火焰传感器，通过火焰传感器感知周围环境是否存在明火，控制蜂鸣器对环境火焰进行报警提示。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>1个有源蜂鸣器</li><li>1个10KΩ电阻</li><li>1个火焰传感器</li></ul><p>火焰传感器（即红外接收三极管）是一种对火焰特别敏感的传感器。其利用红外线对火焰的敏感特性，用特制的红外线接收管来检测火焰，然后将火焰的亮度转化成电平信号供控制器处理。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155505.jpg" alt="火焰传感器"></p><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>火焰传感器的负极(短脚)接到5V引脚，正极(长脚)连接10KΩ的电阻，电阻的另一端连接GND。传感器与电阻连接在一起并接入到开发板模拟输入A0引脚。蜂鸣器正极接开发板数字引脚8，负极接GND。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155520.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155535.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Flame * 火焰传感器检测到火焰后，控制蜂鸣器报警 */</span><span class="token keyword">int</span> beep <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义蜂鸣器接口为数字8 接口</span><span class="token keyword">int</span> flameVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储火焰传感器数据</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>beep<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义beep 为输出接口</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  flameVal <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>A0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取火焰传感器的模拟值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>flameVal <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当模拟值大于200时蜂鸣器鸣响，阈值根据实际测试进行修改</span>  <span class="token punctuation">{</span>     <span class="token function">digitalWrite</span><span class="token punctuation">(</span>beep<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>     <span class="token function">digitalWrite</span><span class="token punctuation">(</span>beep<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155554.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>当有火焰靠近时，蜂鸣器鸣响，当无火焰时，蜂鸣器停止鸣响。</p><h2 id="5-实验分析"><a href="#5-实验分析" class="headerlink" title="5. 实验分析"></a>5. 实验分析</h2><p>通过读取火焰传感器的模拟值，根据设定的阈值进行比较，进而控制蜂鸣器鸣响。这个实验跟上一篇光控灯实验非常相似，都是通过特定传感器将光信号转换成高低变化的电平信号供控制器进行处理。</p><p>很多时候，对于输出模拟量的传感器都需要一个阈值，通过阈值比较进行实际的控制逻辑，阈值的选择需要根据实际情况进行反复调整，直到满足实际功能需求。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇11—光控灯</title>
      <link href="/posts/4db6.html"/>
      <url>/posts/4db6.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401154938.jpg" alt=""></p><p>本篇介绍光敏电阻，通过模拟输入采集环境光强来控制LED灯亮度，做一个无需人为干预的自动控制设备。</p><p>传感器是一种检测装置，能感受并采集到被测量的信息，在当下物联网、智能家居中占据重要地位。一切智能化、自动化设备、各种云计算大数据分析中最基础的就是数据，数据从何而来，绝大多数都来自传感器。其中光敏电阻可算是最简单的传感器之一了。</p><p>光敏电阻是一种电阻值随照射光强度增加而下降的电阻，基于其内部光电效应，光照越强电阻值越小，光照越弱，电阻值越大。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155110.jpg" alt="光敏电阻"></p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>1个LED灯</li><li>1个220Ω限流电阻</li><li>1个光敏电阻</li><li>1个1K普通电阻</li></ul><p>我们将光敏电阻作为一个电阻跟一个普通电阻串联，根据串联分压的方法，通过analogRead() 读取其电压。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155136.jpg" alt="串联分压"></p><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>直插LED灯正极连接限流电阻，电阻另一端连接开发板第10引脚，LED灯负极接开发板GND。光敏电阻一端接GND,电阻一端接5V，光敏电阻和普通电阻相接，然后接入A0引脚。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155150.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155203.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   AutoLed   通过光敏电阻检测环境光，进而控制LED灯亮度*/</span><span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> sensorValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存读到的传感器模拟值</span><span class="token keyword">int</span> ledValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//保存LED灯占空比</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//数字口要选择带~号的具有pwm功能的输出口</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  sensorValue <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>A0<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//读取A0模拟口的数值</span>  ledValue <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>sensorValue<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将400到800之间的数据映射成0到200之间的数据</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> ledValue<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//PWM控制LED灯亮度</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155224.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>遮挡光敏电阻，LED灯变亮，无遮挡下，LED灯亮度变暗。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401155241.gif" alt="实验现象"></p><h2 id="4-实验分析"><a href="#4-实验分析" class="headerlink" title="4. 实验分析"></a>4. 实验分析</h2><p>通过analogRead()读取光敏电阻与普通电阻串联分压后的电压数据，使用map()函数做重新映射，然后使用analogWrite()函数改变LED灯的亮度。</p><p>根据串联分压，光敏电阻上的电压值为R1/(R1+R2) * 5V。</p><p>通过测试发现遮挡和不遮挡的情况下，模拟输入的范围大概在400~800之间，所以map()函数里面区间为[400,800]，由于电源波动或外界干扰等原因，输出的数据可能也会受到一定的影响，你得到的区间可能有变化，需要多次调整测试来达到理想效果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> Led </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇10—电位器控制LED灯</title>
      <link href="/posts/474.html"/>
      <url>/posts/474.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401154145.jpg" alt=""></p><p>本篇介绍Arduino模拟输入功能，通过读取电位器输入的电压值来控制LED灯的亮度。</p><p>模拟输入引脚是带有ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现读入模拟值的功能。</p><p>Arduino 模拟输入功能有10位精度，即可以将0～5V的电压信号转换为0～1024的整数形式表示。</p><p>我们通过使用analogRead() 函数读取电位器输入的电压值，然后通过analogWrite()函数来控制LED灯亮度。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>1个LED灯</li><li>1个220Ω限流电阻</li><li>1个电位器</li></ul><p>电位器是一个可调的电阻，其原理如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401154222.jpg" alt="电位器原理图"></p><p>通过旋转旋钮改变2号脚位置，从而改变2号脚到两端的阻值。实验中将1脚和3脚分别接到开发板的5V的GND，再通过模拟输入引脚A0来读取电位器2号脚分得的电压，其范围在0V和5V之间。</p><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>直插LED灯正极连接限流电阻，电阻另一端连接开发板第10引脚，LED灯负极接开发板GND。电位器1号脚和3号脚分别连接开发板5V和GND，2号脚连接开发板A0引脚。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401154309.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401154324.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   AnalogRead   通过电位器改变LED灯亮度*/</span><span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> readValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存读到的模拟值</span><span class="token keyword">int</span> ledValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//保存LED灯占空比</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//数字口要选择带~号的具有pwm功能的输出口</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  readValue <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>A0<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//读取A0模拟口的数值（0-5V 对应 0-1204取值）</span>  ledValue <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>readValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将0到1024之间的数据映射成0到255之间的数据</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> ledValue<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//PWM最大取值255  </span><span class="token punctuation">}</span>    </code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401154345.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>通过旋转电位器旋钮，LED灯亮度改变。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401154805.gif" alt="实验现象"></p><h2 id="4-函数介绍"><a href="#4-函数介绍" class="headerlink" title="4. 函数介绍"></a>4. 函数介绍</h2><p><strong>analogRead()</strong></p><ul><li>描述：读取指定模拟引脚的值。</li><li>函数原型：<strong>analogRead(pin)</strong></li><li>参数：模拟输入引脚。</li><li>返回值：0到1024之间的整数。</li></ul><p><strong>map()</strong></p><ul><li>描述：将数据从一个范围映射到另一个范围。</li><li>函数原型：<strong>map(value, fromLow, fromHigh, toLow, toHigh)</strong></li><li>参数：<ul><li>value: 要映射的数据</li><li>fromLow: 当前范围的下限值。</li><li>formHigh: 当前范围的上限值。</li><li>toLow: 目标范围的下限值。</li><li>toHigh: 目标范围的上限值。</li></ul></li><li>返回值：重新映射后的数据。</li></ul><h2 id="5-实验分析"><a href="#5-实验分析" class="headerlink" title="5. 实验分析"></a>5. 实验分析</h2><p>程序中通过analogRead()函数来读取模拟输入值，这个输入值的范围是0到1024之间，然后通过analogWrite()函数来改变LED灯占空比，占空比的范围是0到255之间。通过使用map()函数将范围做了重新映射。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> Led </tag>
            
            <tag> 电位器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇09—会呼吸的灯</title>
      <link href="/posts/a373.html"/>
      <url>/posts/a373.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153632.jpg" alt=""></p><p>本篇使用Arduino模拟输出功能，通过PWM脉宽调制来控制LED灯亮度，使其呈现呼吸灯效果。</p><h2 id="1-模拟信号"><a href="#1-模拟信号" class="headerlink" title="1. 模拟信号"></a>1. 模拟信号</h2><p>数字信号是以0、1表示的电平不连续变化的信号，而模拟信号则是用连续变化的物理量来表示信息的，信号随着时间连续变化。在我们生活中接触到的大多数都是模拟信号，例如声音、光照、温度的变化等。</p><p>在我们的Uno R3开发板上，第3、5、6、9、10、11引脚具有PWM(Pulse Width Modulation脉冲宽度调制)功能。</p><p>通过使用analogWrtie()函数，在指定的引脚上通过高低电平的不断转换输出一个周期固定的方波，通过改变高低电平在每个周期中所占的比例（占空比），进而得到不同的电压输出。</p><p>当一个周期内高电平出现时间长一些时，输出电压就会高一些，LED灯更亮一些。当高电平出现的时间短一些时，输出电压就会低一些，LED灯亮度则会暗一些。</p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>1个LED灯</li><li>1个220Ω限流电阻</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>直插LED灯正极连接限流电阻，电阻另一端连接开发板第3引脚，LED灯负极接开发板GND。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153702.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153718.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Breath * 通过模拟输出PWM控制LED灯，改变其亮度，达到呼吸效果 */</span><span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> a<span class="token operator">&lt;=</span><span class="token number">255</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//循环语句，控制PWM亮度的增加</span>  <span class="token punctuation">{</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">//当前亮度级别维持的时间,单位毫秒            </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">;</span> a<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">--</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//循环语句，控制PWM亮度减小</span>  <span class="token punctuation">{</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">//当前亮度的维持的时间,单位毫秒  </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153736.jpg" alt="程序下载"></p><h2 id="4-实验现象"><a href="#4-实验现象" class="headerlink" title="4. 实验现象"></a>4. 实验现象</h2><p>LED灯由亮变暗，又由暗变量。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153753.gif" alt="实验现象"></p><h2 id="5-函数介绍"><a href="#5-函数介绍" class="headerlink" title="5. 函数介绍"></a>5. 函数介绍</h2><p><strong>analogWrite()</strong></p><ul><li>描述：在指定引脚输出指定占空比的PWM方波。</li><li>函数原型：<strong>analogWrite(pin, value)</strong></li><li>参数：<ul><li>pin:输出引脚。</li><li>value:占空比。介于0和255之间。</li></ul></li><li>返回值：没有。</li></ul><h2 id="6-实验分析"><a href="#6-实验分析" class="headerlink" title="6. 实验分析"></a>6. 实验分析</h2><p>程序中使用analogWrite()函数，通过两个for循环，逐渐改变输出PWM占空比，进而改变LED灯的亮度。两个for循环中都有延时语句，是为了让我们肉眼能观察到亮度调节的效果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> Led </tag>
            
            <tag> PWM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇08—播放音乐</title>
      <link href="/posts/badd.html"/>
      <url>/posts/badd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401152854.jpg" alt=""></p><p>本篇介绍电子产品中的发声器件—蜂鸣器，通过控制蜂鸣器播放「葫芦娃」，带你回归美好童年。</p><h2 id="1-了解蜂鸣器"><a href="#1-了解蜂鸣器" class="headerlink" title="1. 了解蜂鸣器"></a>1. 了解蜂鸣器</h2><p>蜂鸣器是一种电子发声元器件，可以发出”beep”的声音。采用直流电压供电，广泛应用于计算机、打印机、复印机、报警器、电子玩具、汽车电子设备、电话机、定时器等电子产品中作发声器件。</p><p>蜂鸣器分为有源蜂鸣器和无源蜂鸣器两种。</p><ul><li>有源蜂鸣器： 内部带有震荡源，只要一通电就会发出固定频率的声音。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153158.jpg" alt="有源蜂鸣器"></p><ul><li>无源蜂鸣器：内部不带震荡源，需要使用2KHz到5KHz的脉冲信号驱动发声，声音频率可变。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153216.JPG" alt="无源蜂鸣器"></p><p>从外观上来看两种蜂鸣器形状相似，有源蜂鸣器底部有密封，无源蜂鸣器底部可看到电路板。两种蜂鸣器都标注有正负极。</p><h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2. 实验材料"></a>2. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>有源蜂鸣器</li><li>无源蜂鸣器</li></ul><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1-根据原理图搭建电路。"><a href="#1-根据原理图搭建电路。" class="headerlink" title="1. 根据原理图搭建电路。"></a>1. 根据原理图搭建电路。</h3><p>蜂鸣器正极接开发板数字引脚8，负极接开发板GND，连接非常简单。</p><p>电路原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153231.jpg" alt="电路原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153347.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * BUZZER1 * 有源蜂鸣器控制 */</span><span class="token keyword">int</span> buzzer <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置控制蜂鸣器的数字IO脚</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>buzzer<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置数字IO脚模式，OUTPUT为输出</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>buzzer<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发声音</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时300ms</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>buzzer<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不发声音</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时300ms</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401153409.jpg" alt="程序下载"></p><h3 id="4-下载后有源蜂鸣器发出声音频率固定的声音。"><a href="#4-下载后有源蜂鸣器发出声音频率固定的声音。" class="headerlink" title="4. 下载后有源蜂鸣器发出声音频率固定的声音。"></a>4. 下载后有源蜂鸣器发出声音频率固定的声音。</h3><h3 id="5-将有源蜂鸣器替换成无源蜂鸣器，拷贝如下代码进行保存并下载。"><a href="#5-将有源蜂鸣器替换成无源蜂鸣器，拷贝如下代码进行保存并下载。" class="headerlink" title="5. 将有源蜂鸣器替换成无源蜂鸣器，拷贝如下代码进行保存并下载。"></a>5. 将有源蜂鸣器替换成无源蜂鸣器，拷贝如下代码进行保存并下载。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   BUZZER2   使用无源蜂鸣器播放《葫芦娃》*/</span><span class="token comment" spellcheck="true">//对应音符和频率值</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_D0 -1</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_D1 294</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_D2 330</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_D3 350</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_D4 393</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_D5 441</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_D6 495</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_D7 556</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DL1 147</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DL2 165</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DL3 175</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DL4 196</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DL5 221</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DL6 248</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DL7 278</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DH1 589</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DH2 661</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DH3 700</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DH4 786</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DH5 882</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DH6 990</span><span class="token macro property">#<span class="token directive keyword">define</span> NOTE_DH7 112</span><span class="token macro property">#<span class="token directive keyword">define</span> WHOLE 1</span><span class="token macro property">#<span class="token directive keyword">define</span> HALF 0.5</span><span class="token macro property">#<span class="token directive keyword">define</span> QUARTER 0.25</span><span class="token macro property">#<span class="token directive keyword">define</span> EIGHTH 0.25</span><span class="token macro property">#<span class="token directive keyword">define</span> SIXTEENTH 0.625</span><span class="token comment" spellcheck="true">//整首曲子的音符部分</span><span class="token keyword">int</span> tune<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span>  NOTE_DH1<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span>  NOTE_DH1<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_DH1<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span>  NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span>  NOTE_DH1<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_DH1<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span>  NOTE_D1<span class="token punctuation">,</span> NOTE_D1<span class="token punctuation">,</span> NOTE_D3<span class="token punctuation">,</span>  NOTE_D1<span class="token punctuation">,</span> NOTE_D1<span class="token punctuation">,</span> NOTE_D3<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span>  NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span>  NOTE_D5<span class="token punctuation">,</span> NOTE_D1<span class="token punctuation">,</span> NOTE_D3<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span>  NOTE_DH1<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span>  NOTE_D5<span class="token punctuation">,</span> NOTE_D1<span class="token punctuation">,</span> NOTE_D2<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span>  NOTE_D7<span class="token punctuation">,</span> NOTE_D7<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D3<span class="token punctuation">,</span>  NOTE_D5<span class="token punctuation">,</span>  NOTE_DH1<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span>  NOTE_D0<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D1<span class="token punctuation">,</span> NOTE_D3<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span>  NOTE_DH1<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span>  NOTE_D0<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D1<span class="token punctuation">,</span> NOTE_D2<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span>  NOTE_D3<span class="token punctuation">,</span> NOTE_D3<span class="token punctuation">,</span> NOTE_D1<span class="token punctuation">,</span> NOTE_DL6<span class="token punctuation">,</span>  NOTE_D1<span class="token punctuation">,</span>  NOTE_D3<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span>  NOTE_D3<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span> NOTE_D6<span class="token punctuation">,</span>  NOTE_DH1<span class="token punctuation">,</span> NOTE_D0<span class="token punctuation">,</span> NOTE_D7<span class="token punctuation">,</span> NOTE_D5<span class="token punctuation">,</span>  NOTE_D6<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//曲子的节拍，即音符持续时间</span><span class="token keyword">float</span> duration<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个变量用来表示共有多少个音符</span><span class="token keyword">int</span> tonePin <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蜂鸣器的pin</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>tonePin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置蜂鸣器的pin为输出模式</span>  length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tune<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tune<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里用了一个sizeof函数，查出数组里有多少个音符</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环音符的次数</span>  <span class="token punctuation">{</span>    <span class="token function">tone</span><span class="token punctuation">(</span>tonePin<span class="token punctuation">,</span> tune<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//依次播放tune数组元素，即每个音符</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">400</span> <span class="token operator">*</span> duration<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每个音符持续的时间，即节拍duration，400是调整时间的越大，曲子速度越慢，越小曲子速度越快</span>    <span class="token function">noTone</span><span class="token punctuation">(</span>tonePin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//停止当前音符，进入下一音符</span>  <span class="token punctuation">}</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待5秒后，循环重新开始</span><span class="token punctuation">}</span></code></pre><h3 id="6-下载完毕后，无源蜂鸣器就会播放「葫芦娃」神曲了。"><a href="#6-下载完毕后，无源蜂鸣器就会播放「葫芦娃」神曲了。" class="headerlink" title="6. 下载完毕后，无源蜂鸣器就会播放「葫芦娃」神曲了。"></a>6. 下载完毕后，无源蜂鸣器就会播放「葫芦娃」神曲了。</h3><h2 id="4-函数介绍"><a href="#4-函数介绍" class="headerlink" title="4. 函数介绍"></a>4. 函数介绍</h2><p><strong>tone()</strong></p><ul><li>描述：在指定引脚产生指定频率的方波，可用于蜂鸣器或扬声器播放音调。</li><li>函数原型：<ul><li><strong>tone(pin, frequency)</strong></li><li><strong>tone(pin, frequency, duration)</strong></li></ul></li><li>参数：<ul><li>pin：产生音调的引脚。</li><li>音调频率，单位赫兹。</li><li>音调持续时间(毫秒单位)，此参数可选。</li></ul></li><li>返回值：没有</li></ul><p><strong>noTone()</strong></p><ul><li>描述：停止产生方波。</li><li>函数原型： <strong>noTone(pin)</strong></li><li>参数：需要停止产生音调的引脚。</li><li>返回值：没有。</li></ul><p><strong>noTone(pin)用来停止由tone(pin, frequency)产生的音调。</strong></p><h2 id="5-程序分析"><a href="#5-程序分析" class="headerlink" title="5. 程序分析"></a>5. 程序分析</h2><p>有源蜂鸣器程序比较简单，通过控制数字I/O引脚输出高低电平来让有源蜂鸣器发声。</p><p>无源蜂鸣器播放「葫芦娃」程序中，定义了跟乐理相关的知识，音符需要对应频率，拍子就是每个音符播放时间。还可以根据不同简谱来演奏出不同的曲子。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> 蜂鸣器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇07—按键控制LED灯</title>
      <link href="/posts/f5bc.html"/>
      <url>/posts/f5bc.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401152342.jpg" alt=""></p><p>前面介绍了Arduino数字I/O，通过控制数字引脚输出来控制LED灯亮灭。本篇将介绍数字I/O的输入功能，通过检测按键状态来控制LED灯亮灭，把LED的亮灭变成人为可控制的。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>1个LED灯</li><li>1个220Ω电阻</li><li>1个轻触按键</li></ul><p>实验中我们用到了轻触按键，常见的有2脚按键和4脚按键，其内部结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401151716.jpg" alt="按键内部结构"></p><p>当按下按键时，按键两端接通，当放开时，两端再次断开。</p><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路"><a href="#1-根据原理图搭建电路" class="headerlink" title="1. 根据原理图搭建电路"></a>1. 根据原理图搭建电路</h3><p>直插式LED灯负极接开发板GND，正极接220Ω限流电阻，电阻另一端接开发板数字9引脚。按键一端接开发板GND，另一端接数字引脚2。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401151735.jpg" alt="实验原理图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401151755.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Digital_Button * 通过按键控制LED灯亮灭 */</span><span class="token keyword">int</span> buttonPin <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按键的管脚定义</span><span class="token keyword">int</span> ledPin <span class="token operator">=</span>  <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// LED灯管脚定义</span><span class="token keyword">int</span> buttonState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储按键状态值</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置LED管脚输出模式</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>buttonPin<span class="token punctuation">,</span> INPUT_PULLUP<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置按键管脚上拉输入模式</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  buttonState <span class="token operator">=</span> <span class="token function">digitalRead</span><span class="token punctuation">(</span>buttonPin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取按键返回状态值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>buttonState <span class="token operator">==</span> LOW<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若按键被按下</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等待跳过按键抖动的不稳定过程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buttonState <span class="token operator">==</span> LOW<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 若按键被按下</span>    <span class="token punctuation">{</span>        <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 点亮LED灯</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 熄灭LED灯</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401151817.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>按下按键，LED灯点亮。放开按键，LED灯熄灭。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401151831.gif" alt="实验现象"></p><h2 id="4-函数介绍"><a href="#4-函数介绍" class="headerlink" title="4. 函数介绍"></a>4. 函数介绍</h2><p><strong>digitalRead()</strong></p><ul><li>描述：读取指定数字引脚的值</li><li>函数原型：<strong>digitalRead(pin)</strong></li><li>参数：要读取的数字引脚编号</li><li>返回值：HIGH(1)或LOW(0)</li></ul><h2 id="5-总结分析"><a href="#5-总结分析" class="headerlink" title="5. 总结分析"></a>5. 总结分析</h2><p>通过digitalRead()函数来读取数字I/O引脚状态，然后根据状态去点亮或者熄灭LED灯。需要注意：</p><ul><li>由于Arduino上电后，数字I/O管脚处于悬空状态，此时通过digitalRead()读到的是一个不稳定的值(可能是高，也可能是低)。所以通过pinMode()函数设置按键引脚为上拉输入模式。即使用内部上拉电阻，按键未按下时，引脚将为高电平，按键按下为低电平。</li></ul><ul><li>按键在按下的过程中，有一段接触未接触的不稳定过程，即按键的抖动。在判断按键状态时，通过delay()延时跳过抖动的不稳定状态，即软件上进行消抖。</li></ul><ul><li>可以不使用内部上拉电阻，在电路上添加按键的上拉电阻或下拉电阻，可达到相同效果。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uno </tag>
            
            <tag> Led </tag>
            
            <tag> 按键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇06——流动的LED灯</title>
      <link href="/posts/6a8f.html"/>
      <url>/posts/6a8f.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401150812.jpg" alt=""></p><p>上一篇介绍了Arduino数字I/O引脚及相关函数，并点亮了板载LED灯。本篇将使用面包板搭建电路，多个LED灯配合显示流动效果。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li><li>面包板及配套连接线</li><li>6个LED灯</li><li>6个220Ω电阻</li></ul><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-根据原理图搭建电路"><a href="#1-根据原理图搭建电路" class="headerlink" title="1. 根据原理图搭建电路"></a>1. 根据原理图搭建电路</h3><p>直插式LED灯有两个引脚，长引脚为正极，短引脚为负极。LED灯点亮就是电流从正极流入，从负极流出。6个LED灯的负极连接到开发板的GND引脚，正极分别连接220Ω限流电阻连接到开发板的数字I/O引脚。</p><p>实验原理图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401150851.jpg" alt="电路连接图"></p><p>实物连接图如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401150914.jpg" alt="实物连接图"></p><h3 id="2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#2-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>2. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Led_Flash * 依次点亮1~6号LED灯，依次熄灭6~1号LED灯，如此循环 */</span><span class="token keyword">int</span> delayTime <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> ledPin<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>ledPin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ledPin <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> ledPin<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//依次设置1~6个数字引脚为输出模式</span>  <span class="token punctuation">{</span>     <span class="token function">pinMode</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置第ledPin个引脚为输出模式</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>ledPin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ledPin <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> ledPin<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//每隔delayTime依次点亮1~6引脚相连的led灯</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点亮ledPin引脚相连的led灯</span>    <span class="token function">delay</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时delayTime</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>ledPin <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> ledPin <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> ledPin<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//每隔delayTime依次熄灭6~1引脚相连的led灯</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//熄灭ledPin引脚相连的led灯</span>    <span class="token function">delay</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时delayTime</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。"><a href="#3-连接开发板，设置好对应端口号和开发板类型，进行程序下载。" class="headerlink" title="3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。"></a>3. 连接开发板，设置好对应端口号和开发板类型，进行程序下载。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401150940.jpg" alt="程序下载"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>LED灯依次点亮，依次熄灭，达到流动效果。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401150957.gif" alt="流水灯效果"></p><h2 id="4-程序分析"><a href="#4-程序分析" class="headerlink" title="4. 程序分析"></a>4. 程序分析</h2><p>在setup部分通过for循环将1<del>6号引脚设置为输出模式。在loop部分，通过两个for循环依次点亮1</del>6号LED灯，依次熄灭6~1号LED灯，使用的依然是digitalWrite函数。</p><p>延时时间定义为200，你可以改变它来控制流动速度。还可以通过修改程序中引脚的输出顺序来尝试更多不同的点亮LED的方式。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> Uno </tag>
            
            <tag> Led </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇05——LED照亮你的美</title>
      <link href="/posts/7938.html"/>
      <url>/posts/7938.html</url>
      
        <content type="html"><![CDATA[<p>本篇主要介绍Arduino数字引脚及相关函数，通过数字I/O输出控制板载LED灯亮灭状态（数字引脚13）。</p><p>数字信号是以0、1表示的电平不连续变化的信号，也就是以二进制的形式表示的信号。在Arduino中数字信号通过高低电平来表示，高电平则为数字信号1，低电平则为数字信号0 ，其实在计算机中也只有0和1两种信号。</p><p>Arduino开发板上每一个带有数字编号的引脚，都是数字引脚，包括标有”A”编号的模拟输入引脚。可以通过这些引脚来实现数字信号的输入输出。</p><h2 id="1-实验材料"><a href="#1-实验材料" class="headerlink" title="1. 实验材料"></a>1. 实验材料</h2><ul><li>Uno R3开发板</li><li>配套USB数据线</li></ul><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2. 实验步骤"></a>2. 实验步骤</h2><h3 id="1-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"><a href="#1-新建sketch，拷贝如下代码替换自动生成的代码并进行保存。" class="headerlink" title="1. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。"></a>1. 新建sketch，拷贝如下代码替换自动生成的代码并进行保存。</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   Blink   等待一秒钟，点亮LED，再等待一秒钟，熄灭LED，如此循环*/</span><span class="token comment" spellcheck="true">//在大多数Arduino控制板上13号引脚都连接了一个标有"L"的LED灯</span><span class="token keyword">int</span> led <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//给13号引脚连接的设备起一个别名"led"</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将"led"引脚设置为输出状态</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span>  HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引脚输出高电平1,点亮LED</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//等待1s</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引脚输出低电平0,熄灭LED</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//等待1s</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401145936.jpg" alt="保存程序"></p><h3 id="2-通过USB数据线连接Uno-R3到电脑。在IDE中设置好对应端口号和开发板类型。"><a href="#2-通过USB数据线连接Uno-R3到电脑。在IDE中设置好对应端口号和开发板类型。" class="headerlink" title="2. 通过USB数据线连接Uno R3到电脑。在IDE中设置好对应端口号和开发板类型。"></a>2. 通过USB数据线连接Uno R3到电脑。在IDE中设置好对应端口号和开发板类型。</h3><h3 id="3-下载程序到开发板。"><a href="#3-下载程序到开发板。" class="headerlink" title="3. 下载程序到开发板。"></a>3. 下载程序到开发板。</h3><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401145941.jpg" alt="上传程序"></p><h2 id="3-实验现象"><a href="#3-实验现象" class="headerlink" title="3. 实验现象"></a>3. 实验现象</h2><p>可观察到板载LED灯间断闪烁。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401145945.gif" alt="LED闪烁"></p><h2 id="4-函数介绍"><a href="#4-函数介绍" class="headerlink" title="4. 函数介绍"></a>4. 函数介绍</h2><p><strong>pinMode()</strong>    </p><ul><li>描述：将指定引脚配置为输入或者输出模式</li><li>函数原型：<strong>pinMode(pin, mode)</strong></li><li>参数：<ul><li>pin:要设置其模式的引脚编号</li><li>mode: INPUT(输入模式), OUTPUT(输出模式), INPUT_PULLUP(上拉输入模式)</li></ul></li><li>返回值: 无返回值</li></ul><p><strong>digitalWrite()</strong>    </p><ul><li>描述：将数字HIGH或LOW值写入数字引脚</li><li>函数原型：<strong>digitalWrite(pin, value)</strong></li><li>参数：<ul><li>pin:要设置其输出的引脚编号</li><li>value:HIGH(1), LOW(0)</li></ul></li><li>返回值: 无返回值</li></ul><p> <strong>delay()</strong>    </p><ul><li>描述：将程序暂停给定参数的时间量（以毫秒为单位）</li><li>函数原型：<strong>delay(ms)</strong></li><li>参数：ms 暂停的毫秒数</li><li>返回值: 无返回值</li></ul><p>程序首先通过pinMode设置13引脚为输出模式，然后在loop里面通过digitalWrite来改变引脚的输出电平，HIGH输出高电平即为当前Arduino的工作电压5V，LOW输出低电平即为0V。delay函数暂停1s让我们可以清晰看到闪烁状态。你也可以减小等待时间，LED就会闪烁的更快了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> Uno </tag>
            
            <tag> Led </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门04——Hello World</title>
      <link href="/posts/c12a.html"/>
      <url>/posts/c12a.html</url>
      
        <content type="html"><![CDATA[<p>在介绍了Arduino开发的软硬件环境之后，本篇开启Arduino编程第一行代码——Hello World。</p><h2 id="程序下载"><a href="#程序下载" class="headerlink" title="程序下载"></a>程序下载</h2><p><strong>1. 连接开发板到电脑。</strong> 将UNO R3开发板通过数据线连接到电脑。打开设备管理器查看驱动是否正常，并记住端口号，在步骤2中需要选择具体端口号。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144537.jpg" alt="查看端口号"></p><p>若未找到设备端口，可能驱动未安装成功，右键带叹号的未识别设备，进行自动搜索安装程序软件即可。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144543.jpg" alt="安装驱动"></p><p><strong>2. 新建sketch，设置端口和开发板类型。</strong>  启动Arduino IDE，在新打开的草图中「<strong>Ctrl+S</strong>」保存程序草图，名称最好为英文。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144546.jpg" alt="保存草图"></p><p>点击<strong>工具</strong>选项，开发板类型选择「Arduino/Genunio Uno」,端口号选择上一步骤电脑识别到的端口号。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144550.jpg" alt="选择端口号和开发板类型"></p><p><strong>3. 上传程序。</strong> 复制以下代码到代码区。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// put your setup code here, to run once:</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化串口并设置波特率为9600</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// put your main code here, to run repeatedly:</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印Hello World!并回车换行</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//延时等待1s</span><span class="token punctuation">}</span></code></pre><p>点击<strong>上传</strong>按钮，IDE会对程序进行验证，若无错误则进行上传，即将程序下载到开发板。下载完成后IDE下方显示「<strong>上传完成</strong>」。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144553.jpg" alt="程序上传"></p><p><strong>4. 观察串口打印信息。</strong>点击右侧<strong>串口监视器</strong>按钮进入串口监视器，将会看到Hello World每隔一秒种打印一次。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144557.jpg" alt="串口监视器"></p><h2 id="程序介绍"><a href="#程序介绍" class="headerlink" title="程序介绍"></a>程序介绍</h2><p>每次新建一个sketch时，IDE会自动生成两部分代码：</p><pre class=" language-C"><code class="language-C">void setup() {  // put your setup code here, to run once:}void loop() {  // put your main code here, to run repeatedly:}</code></pre><p>其中setup函数里面添加的程序只执行一次，一般为初始化语句。而loop函数里的程序语句将循环执行。</p><p>本程序中在setup部分添加了串口初始化语句：</p><pre class=" language-c"><code class="language-c">Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化串口并设置波特率为9600</span></code></pre><p>在loop部分添加每间隔1s时间打印一次「Hello World!」的代码：</p><pre class=" language-C"><code class="language-C">Serial.println("Hello World!"); //打印Hello World!并回车换行delay(1000); //延时等待1s</code></pre><p>以上就是Arduino编程第一行代码，你已经会使用串口打印Hello World了。Arduino编程就是这么简单，动手试一下吧。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> Uno </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇03—UNO R3开发板介绍</title>
      <link href="/posts/e28b.html"/>
      <url>/posts/e28b.html</url>
      
        <content type="html"><![CDATA[<p>工欲善其事，必先利其器。上一篇讲解了Arduino开发的软件环境，本文将介绍Arduino开发的硬件环境，即Arduino UNO R3开发板。</p><h2 id="UNO-R3开发板"><a href="#UNO-R3开发板" class="headerlink" title="UNO R3开发板"></a>UNO R3开发板</h2><p>Arduino生态中包括多种开发板、模块、扩展板。其中UNO R3是最适合入门且功能齐全使用量最多的Arduino开发板。以下就是官方正版Arduino UNO R3开发板本尊的庐山真面目。<a href="https://store.arduino.cc/usa/arduino-uno-rev3" target="_blank" rel="noopener">关于UNO R3官网的介绍。</a></p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144209.jpg" alt="Uno R3"></p><p>Arduino Uno是一款基于ATmega328P的微控制器板。它有14个数字输入/输出引脚(其中6个可用作PWM输出)，6个模拟输入，16MHz晶振时钟，USB连接，电源插孔，ICSP接头和复位按钮。只需要通过USB数据线连接电脑就能供电、程序下载和数据通讯。</p><p>UNO R3硬件资源配置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144227.jpg" alt="硬件配置"></p><h3 id="重要的引脚介绍"><a href="#重要的引脚介绍" class="headerlink" title="重要的引脚介绍"></a>重要的引脚介绍</h3><ul><li><strong>Power 引脚:</strong> 开发板可提供3.3V和5V电压输出，Vin引脚可用于从外部电源为开发板供电。</li><li><strong>Analog In引脚：</strong> 模拟输入引脚，开发板可读取外部模拟信号，A0~A5为模拟输入引脚。</li><li><strong>Digital 引脚：</strong>UNO R3拥有14个数字I/O引脚，其中6个可用于PWM(脉宽调制)输出。数字引脚用于读取逻辑值(0或1)，或者作为数字输出引脚来驱动外部模块。标有”~”的引脚可产生PWM。</li><li><strong>TX和RX引脚：</strong> 标有TX(发送)和RX(接收)的两个引脚用于串口通讯。其中标有TX和RX的LED灯连接相应引脚，在串口通讯时会以不同速度闪烁。</li><li><strong>13引脚：</strong>开发板标记第13引脚，连接板载LED灯，可通过控制13引脚来控制LED灯亮灭。一般拿到开发板上电板载灯都会闪烁，可辅助检测开发板是否正常。</li></ul><h2 id="国产UNO-R3开发板"><a href="#国产UNO-R3开发板" class="headerlink" title="国产UNO R3开发板"></a>国产UNO R3开发板</h2><p>虽然UNO R3使用量大，但价格上对比国内其他类型开发板没有明显优势。官网售价22刀，某宝正版售价也得近百元。所以国产性价比更高的UNO R3开发板应运而生。Arduino从来都抱着开源的态度，公开一切设计原理图和程序，所以在不影响编程和使用的情况下，国产UNO也是不错的选择。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144249.jpg" alt="国产"></p><h2 id="入门开发套件"><a href="#入门开发套件" class="headerlink" title="入门开发套件"></a>入门开发套件</h2><p>对于Arduino的学习，单纯的有软件环境和开发板是不够的，必须配套相应的外部元器件、传感器才能进行编程实验。比如需要通过电位器元件来改变模拟输入电压，从而让开发板进行读取，开发板读取后控制LED灯的亮度。</p><p>市面上入门开发套件种类繁多，大家都在标榜自己的套件有多少种传感器元器件，多么的豪华高大上。其实对于初学者，重要的是学习Arduino编程，从这点上来说套件不在于多，只要能辅助学习UNO R3开发板所有资源就够了。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401144305.jpg" alt="入门套件"></p><p>关于Arduino UNO R3开发板的讲解就到这里，从下一篇开始我们来真正学习Arduino编程。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> Uno </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门篇02—开发环境介绍</title>
      <link href="/posts/ea4f.html"/>
      <url>/posts/ea4f.html</url>
      
        <content type="html"><![CDATA[<p>工欲善其事，必先利其器。本文主要介绍Arduino开发环境IDE的安装及功能介绍。</p><h2 id="Arduino-IDE安装"><a href="#Arduino-IDE安装" class="headerlink" title="Arduino IDE安装"></a>Arduino IDE安装</h2><p>从官网下载IDE开发环境，<a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">IDE下载地址</a> 。笔者使用Win10系统，点击 <strong>Windows ZIP file for non admin install</strong>选项。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142228.jpg" alt="IDE下载"></p><p>点击<strong>JUST DOWNLOAD</strong>进行下载。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142301.jpg" alt="下载"></p><p>下载完毕后解压文件夹，双击<strong>arduino.exe</strong>运行软件。Arduino IDE依赖Java开发环境，需要PC机安装Java的JDK并进行变量配置。如果双击启动失败，可能是PC机无JDK支持。</p><h2 id="IDE软件介绍"><a href="#IDE软件介绍" class="headerlink" title="IDE软件介绍"></a>IDE软件介绍</h2><p>启动IDE，进入初始化界面，打开软件会发现这个开发环境非常简洁。</p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142402.jpg" alt="启动IDE"></p><p>界面大致分为四个部分：</p><ul><li>菜单栏。包含文件菜单、编辑菜单、程序菜单、工具菜单和帮助菜单；</li><li>工具栏。包含编译、上传、新建程序(sketch)、打开程序(sketch)、保存程序(sketch)和串口监视器(Serial Monitor)；</li><li>编辑区。程序代码编写区域；</li><li>状态区。显示程序编译和上传等信息。</li></ul><p>几个常用功能介绍：</p><ul><li>点击<strong>文件</strong>-&gt;<strong>首选项</strong> (快捷键<strong>Ctrl+，</strong>)进入软件设置界面，可在此界面设置编辑器语言、编辑器字体大小、显示行号、代码折叠等。通过设置编辑器语言可进行中英文切换，还有很多其他外文。设置完毕后点击确认(好/OK)，部分设置需要重启软件生效。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142437.jpg" alt="首选项"></p><ul><li>点击<strong>文件</strong>-&gt;<strong>示例</strong>可打开环境内置示例程序。环境自带非常多的例程，包括基础、数字、模拟、通讯、显示等。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142507.jpg" alt="示例"></p><ul><li>点击<strong>项目</strong>，会发现工具栏中的图标编译、上传也包含在其中。点击<strong>加载库</strong>，选择列表中的库文件后，编辑区自动添加相关的头文件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142556.jpg" alt="加载库"></p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142613.jpg" alt="加载后效果"></p><ul><li>点击<strong>项目</strong>-&gt;<strong>加载库</strong>-&gt;<strong>管理库</strong>，可搜索安装网络中各种支持库，选中需要安装的库点击安装即可在线下载安装，非常方便。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142632.jpg" alt="管理库"></p><ul><li>点击<strong>工具</strong>-&gt;<strong>开发板</strong> ，可进行不同开发板的选择，列表包含了大部分Arduino开发板，可通过<strong>开发板管理器</strong>添加开发板选项。点击<strong>端口</strong> 进行端口号选择。此外<strong>工具</strong>选项还包含为开发板烧录引导程序的相关选项。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142653.jpg" alt="选择开发板"></p><ul><li>点击<strong>帮助</strong>，在列表中点击相应选项可进入官网相关内容的介绍。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401142753.jpg" alt="帮助"></p><ul><li>点击<strong>工具栏</strong>中的<strong>串口监视器</strong>，可启动IDE自带的串口监视窗口，此工具用于串口通讯，非常方便，后续学习经常用到此功能。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401143446.jpg" alt="串口监视器"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> Uno </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础入门01—Arduino介绍</title>
      <link href="/posts/c40.html"/>
      <url>/posts/c40.html</url>
      
        <content type="html"><![CDATA[<p>欢迎来到Arduino的世界，本文主要介绍Arduino的优势，开发所涉及的硬件分类，开发语言及开发环境的下载。可登陆<a href="https://www.arduino.cc/" target="_blank" rel="noopener">Arduino官网</a>学习了解更多Arduino信息。</p><h2 id="什么是Arduino"><a href="#什么是Arduino" class="headerlink" title="什么是Arduino"></a>什么是Arduino</h2><p>Arduino 是一款便捷灵活、方便上手的开源电子原型平台，包含硬件（各种型号的arduino板）和软件（arduino IDE)，她适用于艺术家、设计师、爱好者和对于“互动”有兴趣的朋友们。  </p><p>Arduino能通过各种各样的传感器来感知环境，通过控制灯光、马达和其他的装置来反馈、影响环境。板子上的微控制器可以通过Arduino的编程语言来编写程序，编译成二进制文件，烧录进微控制器。  </p><p> 对Arduino的编程是利用 Arduino编程语言 (基于 Wiring)和Arduino开发环境(based on Processing)来实现的。基于Arduino的项目，可以只包含Arduino，也可以包含Arduino和其他一些在PC上运行的软件，他们之间进行通信 (比如 Flash, Processing, MaxMSP)来实现。  </p><p>你可以自己动手制作，也可以购买成品套装。Arduino所使用到的软件都可以免费下载。硬件参考设计 (CAD 文件)也是遵循availableopen-source协议, 你可以非常自由地根据要求去修改他们。  </p><h2 id="Arduino的优势"><a href="#Arduino的优势" class="headerlink" title="Arduino的优势"></a>Arduino的优势</h2><p>目前市场上还有许多其他的单片机和单片机平台，例如51单片机、STM32单片机等。但他们对于普通开发者来说门槛相对较高，需要有一定编程和硬件相关基础，内部寄存器较为繁杂，主流开发环境Keil配置相对麻烦，特别是对于STM32的开发，即使使用官方库也少不了环境配置，还有就是开发环境是收费的。  </p><p>Arduino不但简化了使用单片机工作的流程，同时还为教师、学生以及兴趣爱好者提供了一些其他系统不具备的优势:  </p><ul><li><strong>便宜</strong>。相比于其他单片机平台而言，Arduino生态的各种开发板性价比相对较高。  </li><li><strong>跨平台</strong>。Arduino软件（IDE）能在Windows、Mac OS X和Linux操作系统中运行，而大多数其他单片机系统仅限于在Windows操作系统中运行。  </li><li><strong>开发环境简单</strong>。Arduino的编程环境易于初学者使用，同时对高级用户来讲也足够灵活，其安装和操作都非常简单。  </li><li><strong>开源可扩展</strong>。Arduino软件硬件都是开源的，开发者可以对软件库进行扩展，也可以下载到千千万万的软件库来实现自己的功能。Arduino允许开发者对硬件电路进行修改和扩展来满足不同的需求。  </li></ul><h2 id="Arduino开发板类型"><a href="#Arduino开发板类型" class="headerlink" title="Arduino开发板类型"></a>Arduino开发板类型</h2><p>Arduino生态包括多种开发板、模块、扩展板、工具和配件。官方将其大致分为五类：入门级、网络版、物联网版、教育版、可穿戴版。具体可从官网查看<a href="https://www.arduino.cc/en/Main/Products" target="_blank" rel="noopener">Arduino开发板类型。</a>  </p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401134931.jpg" alt="Arduino开发板类型"></p><p>其中入门级开发板易于使用。建议初学者使用入门级如Arduino UNO R3。  </p><p>  <img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401134957.jpg" alt="入门级开发板"></p><h2 id="Arduino开发语言"><a href="#Arduino开发语言" class="headerlink" title="Arduino开发语言"></a>Arduino开发语言</h2><p>Arduino使用C/C++编写程序，虽然C++兼容C语言，但这是两种语言，C语言是一种面向过程的编程语言，C++是一种面向对象的编程语言。早期的Arduino核心库使用C语言编写，后来引进了面向对象的思想，目前最新的Arduino核心库采用C与C++混合编写而成。  </p><p>通常我们说的Arduino语言，是指Arduino核心库文件提供的各种应用程序编程接口（Application Programming Interface，简称API）的集合。这些API是对更底层的单片机支持库进行二次封装所形成的。例如，使用AVR单片机的Arduino的核心库是对AVR-Libc（基于GCC的AVR支持库）的二次封装。  </p><p>传统开发方式中，需要通过配置多个寄存器来实现相应功能，而在Arduino中，繁杂的寄存器被封装成简单的API，能进行直观控制，增强程序的可读性的同时也提高了开发效率。</p><h2 id="Arduino开发环境"><a href="#Arduino开发环境" class="headerlink" title="Arduino开发环境"></a>Arduino开发环境</h2><p>Arduino开发环境IDE可从官网进行下载，支持Windows、Mac OS X、Linux不同平台，对应PC平台进行下载。<a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">IDE下载地址</a><br>当前最新版本为1.8.5。我的电脑为Windows系统，Windows版本有三种下载方式，选择一种下载即可。  </p><p><img src="https://cdn.jsdelivr.net/gh/TonyIOT/cdn@1.1/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/TonyIOT/Picgo/images/20200401135041.jpg" alt="IDE下载"></p><p>关于IDE软件的介绍将在下一节中详细介绍。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> Uno </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
